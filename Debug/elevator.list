
elevator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005138  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005244  08005244  00015244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052e8  080052e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080052e8  080052e8  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052e8  080052e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080052f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000078  08005368  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08005368  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef66  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c4  00000000  00000000  0002f007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  000311d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  000321e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018be3  00000000  00000000  00033150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116ca  00000000  00000000  0004bd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f39  00000000  00000000  0005d3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef336  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  000ef388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800522c 	.word	0x0800522c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800522c 	.word	0x0800522c

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup 4E or 3F 27

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f002 f86d 	bl	8002278 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	200000c4 	.word	0x200000c4

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f002 f83d 	bl	8002278 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	200000c4 	.word	0x200000c4

0800020c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]
    switch (row)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d003      	beq.n	8000224 <lcd_put_cur+0x18>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2b01      	cmp	r3, #1
 8000220:	d005      	beq.n	800022e <lcd_put_cur+0x22>
 8000222:	e009      	b.n	8000238 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800022a:	603b      	str	r3, [r7, #0]
            break;
 800022c:	e004      	b.n	8000238 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000234:	603b      	str	r3, [r7, #0]
            break;
 8000236:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	4618      	mov	r0, r3
 800023e:	f7ff ff85 	bl	800014c <lcd_send_cmd>
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}

0800024a <lcd_init>:


void lcd_init (void)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800024e:	2032      	movs	r0, #50	; 0x32
 8000250:	f001 f8a8 	bl	80013a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000254:	2030      	movs	r0, #48	; 0x30
 8000256:	f7ff ff79 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800025a:	2005      	movs	r0, #5
 800025c:	f001 f8a2 	bl	80013a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000260:	2030      	movs	r0, #48	; 0x30
 8000262:	f7ff ff73 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000266:	2001      	movs	r0, #1
 8000268:	f001 f89c 	bl	80013a4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800026c:	2030      	movs	r0, #48	; 0x30
 800026e:	f7ff ff6d 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000272:	200a      	movs	r0, #10
 8000274:	f001 f896 	bl	80013a4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000278:	2020      	movs	r0, #32
 800027a:	f7ff ff67 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800027e:	200a      	movs	r0, #10
 8000280:	f001 f890 	bl	80013a4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000284:	2028      	movs	r0, #40	; 0x28
 8000286:	f7ff ff61 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f001 f88a 	bl	80013a4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000290:	2008      	movs	r0, #8
 8000292:	f7ff ff5b 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000296:	2001      	movs	r0, #1
 8000298:	f001 f884 	bl	80013a4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ff55 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f001 f87e 	bl	80013a4 <HAL_Delay>
	HAL_Delay(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f001 f87b 	bl	80013a4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002ae:	2006      	movs	r0, #6
 80002b0:	f7ff ff4c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f001 f875 	bl	80013a4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002ba:	200c      	movs	r0, #12
 80002bc:	f7ff ff46 	bl	800014c <lcd_send_cmd>
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002cc:	e006      	b.n	80002dc <lcd_send_string+0x18>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	1c5a      	adds	r2, r3, #1
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff68 	bl	80001ac <lcd_send_data>
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d1f4      	bne.n	80002ce <lcd_send_string+0xa>
}
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	3708      	adds	r7, #8
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
	...

080002f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002f4:	f000 fff4 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f8:	f000 f844 	bl	8000384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002fc:	f000 fa18 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000300:	f000 f9ec 	bl	80006dc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000304:	f000 f952 	bl	80005ac <MX_TIM2_Init>
  MX_I2C1_Init();
 8000308:	f000 f8d2 	bl	80004b0 <MX_I2C1_Init>
  MX_TIM1_Init();
 800030c:	f000 f8fe 	bl	800050c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000310:	f000 f890 	bl	8000434 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000314:	4816      	ldr	r0, [pc, #88]	; (8000370 <main+0x80>)
 8000316:	f002 ffd5 	bl	80032c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800031a:	2100      	movs	r1, #0
 800031c:	4815      	ldr	r0, [pc, #84]	; (8000374 <main+0x84>)
 800031e:	f003 f87b 	bl	8003418 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 8000322:	2104      	movs	r1, #4
 8000324:	4813      	ldr	r0, [pc, #76]	; (8000374 <main+0x84>)
 8000326:	f003 f919 	bl	800355c <HAL_TIM_PWM_Start_IT>
  HAL_ADC_Start(&hadc1);
 800032a:	4813      	ldr	r0, [pc, #76]	; (8000378 <main+0x88>)
 800032c:	f001 f936 	bl	800159c <HAL_ADC_Start>
  lcd_init();
 8000330:	f7ff ff8b 	bl	800024a <lcd_init>

  ready();
 8000334:	f000 fd40 	bl	8000db8 <ready>
  HAL_GPIO_WritePin(GPIOC, f1_Pin, 1);
 8000338:	2201      	movs	r2, #1
 800033a:	2101      	movs	r1, #1
 800033c:	480f      	ldr	r0, [pc, #60]	; (800037c <main+0x8c>)
 800033e:	f001 fe0d 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, 0xf-f1_Pin, 0);
 8000342:	2200      	movs	r2, #0
 8000344:	210e      	movs	r1, #14
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <main+0x8c>)
 8000348:	f001 fe08 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, l1_Pin, 1);
 800034c:	2201      	movs	r2, #1
 800034e:	2110      	movs	r1, #16
 8000350:	480a      	ldr	r0, [pc, #40]	; (800037c <main+0x8c>)
 8000352:	f001 fe03 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, 0xf0-l1_Pin, 0);
 8000356:	2200      	movs	r2, #0
 8000358:	21e0      	movs	r1, #224	; 0xe0
 800035a:	4808      	ldr	r0, [pc, #32]	; (800037c <main+0x8c>)
 800035c:	f001 fdfe 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,0);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000366:	4806      	ldr	r0, [pc, #24]	; (8000380 <main+0x90>)
 8000368:	f001 fdf8 	bl	8001f5c <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800036c:	e7fe      	b.n	800036c <main+0x7c>
 800036e:	bf00      	nop
 8000370:	20000118 	.word	0x20000118
 8000374:	20000160 	.word	0x20000160
 8000378:	20000094 	.word	0x20000094
 800037c:	40011000 	.word	0x40011000
 8000380:	40010c00 	.word	0x40010c00

08000384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b094      	sub	sp, #80	; 0x50
 8000388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800038a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800038e:	2228      	movs	r2, #40	; 0x28
 8000390:	2100      	movs	r1, #0
 8000392:	4618      	mov	r0, r3
 8000394:	f004 fac8 	bl	8004928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000398:	f107 0314 	add.w	r3, r7, #20
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
 80003a0:	605a      	str	r2, [r3, #4]
 80003a2:	609a      	str	r2, [r3, #8]
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003a8:	1d3b      	adds	r3, r7, #4
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b4:	2302      	movs	r3, #2
 80003b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003b8:	2301      	movs	r3, #1
 80003ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003bc:	2310      	movs	r3, #16
 80003be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	2302      	movs	r3, #2
 80003c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003c4:	2300      	movs	r3, #0
 80003c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003c8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80003cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003d2:	4618      	mov	r0, r3
 80003d4:	f002 fa56 	bl	8002884 <HAL_RCC_OscConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003de:	f000 fd0d 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e2:	230f      	movs	r3, #15
 80003e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e6:	2302      	movs	r3, #2
 80003e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	2300      	movs	r3, #0
 80003ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003f4:	2300      	movs	r3, #0
 80003f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f8:	f107 0314 	add.w	r3, r7, #20
 80003fc:	2102      	movs	r1, #2
 80003fe:	4618      	mov	r0, r3
 8000400:	f002 fcc2 	bl	8002d88 <HAL_RCC_ClockConfig>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d001      	beq.n	800040e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800040a:	f000 fcf7 	bl	8000dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800040e:	2302      	movs	r3, #2
 8000410:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000412:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000416:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4618      	mov	r0, r3
 800041c:	f002 fe4c 	bl	80030b8 <HAL_RCCEx_PeriphCLKConfig>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000426:	f000 fce9 	bl	8000dfc <Error_Handler>
  }
}
 800042a:	bf00      	nop
 800042c:	3750      	adds	r7, #80	; 0x50
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000446:	4a19      	ldr	r2, [pc, #100]	; (80004ac <MX_ADC1_Init+0x78>)
 8000448:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_ADC1_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000452:	2201      	movs	r2, #1
 8000454:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000456:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_ADC1_Init+0x74>)
 800045e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000462:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800046a:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_ADC1_Init+0x74>)
 800046c:	2201      	movs	r2, #1
 800046e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000470:	480d      	ldr	r0, [pc, #52]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000472:	f000 ffbb 	bl	80013ec <HAL_ADC_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800047c:	f000 fcbe 	bl	8000dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000480:	2304      	movs	r3, #4
 8000482:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000484:	2301      	movs	r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000488:	2307      	movs	r3, #7
 800048a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	4619      	mov	r1, r3
 8000490:	4805      	ldr	r0, [pc, #20]	; (80004a8 <MX_ADC1_Init+0x74>)
 8000492:	f001 f93d 	bl	8001710 <HAL_ADC_ConfigChannel>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800049c:	f000 fcae 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	3710      	adds	r7, #16
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000094 	.word	0x20000094
 80004ac:	40012400 	.word	0x40012400

080004b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004b4:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_I2C1_Init+0x50>)
 80004b6:	4a13      	ldr	r2, [pc, #76]	; (8000504 <MX_I2C1_Init+0x54>)
 80004b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80004ba:	4b11      	ldr	r3, [pc, #68]	; (8000500 <MX_I2C1_Init+0x50>)
 80004bc:	4a12      	ldr	r2, [pc, #72]	; (8000508 <MX_I2C1_Init+0x58>)
 80004be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80004c0:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_I2C1_Init+0x50>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <MX_I2C1_Init+0x50>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_I2C1_Init+0x50>)
 80004ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80004d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <MX_I2C1_Init+0x50>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_I2C1_Init+0x50>)
 80004dc:	2200      	movs	r2, #0
 80004de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <MX_I2C1_Init+0x50>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <MX_I2C1_Init+0x50>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <MX_I2C1_Init+0x50>)
 80004ee:	f001 fd7f 	bl	8001ff0 <HAL_I2C_Init>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80004f8:	f000 fc80 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	200000c4 	.word	0x200000c4
 8000504:	40005400 	.word	0x40005400
 8000508:	000186a0 	.word	0x000186a0

0800050c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000512:	f107 0308 	add.w	r3, r7, #8
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000520:	463b      	mov	r3, r7
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000528:	4b1e      	ldr	r3, [pc, #120]	; (80005a4 <MX_TIM1_Init+0x98>)
 800052a:	4a1f      	ldr	r2, [pc, #124]	; (80005a8 <MX_TIM1_Init+0x9c>)
 800052c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_TIM1_Init+0x98>)
 8000530:	223f      	movs	r2, #63	; 0x3f
 8000532:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	4b1b      	ldr	r3, [pc, #108]	; (80005a4 <MX_TIM1_Init+0x98>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_TIM1_Init+0x98>)
 800053c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000540:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000542:	4b18      	ldr	r3, [pc, #96]	; (80005a4 <MX_TIM1_Init+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <MX_TIM1_Init+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800054e:	4b15      	ldr	r3, [pc, #84]	; (80005a4 <MX_TIM1_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000554:	4813      	ldr	r0, [pc, #76]	; (80005a4 <MX_TIM1_Init+0x98>)
 8000556:	f002 fe65 	bl	8003224 <HAL_TIM_Base_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 fc4c 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000564:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800056a:	f107 0308 	add.w	r3, r7, #8
 800056e:	4619      	mov	r1, r3
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <MX_TIM1_Init+0x98>)
 8000572:	f003 fb8d 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800057c:	f000 fc3e 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	4619      	mov	r1, r3
 800058c:	4805      	ldr	r0, [pc, #20]	; (80005a4 <MX_TIM1_Init+0x98>)
 800058e:	f004 f855 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000598:	f000 fc30 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	3718      	adds	r7, #24
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	20000118 	.word	0x20000118
 80005a8:	40012c00 	.word	0x40012c00

080005ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b092      	sub	sp, #72	; 0x48
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ca:	f107 0314 	add.w	r3, r7, #20
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005ea:	4b3b      	ldr	r3, [pc, #236]	; (80006d8 <MX_TIM2_Init+0x12c>)
 80005ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 80005f2:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <MX_TIM2_Init+0x12c>)
 80005f4:	223f      	movs	r2, #63	; 0x3f
 80005f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f8:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <MX_TIM2_Init+0x12c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_TIM2_Init+0x12c>)
 8000600:	f242 720f 	movw	r2, #9999	; 0x270f
 8000604:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000606:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_TIM2_Init+0x12c>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800060c:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MX_TIM2_Init+0x12c>)
 800060e:	2200      	movs	r2, #0
 8000610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000612:	4831      	ldr	r0, [pc, #196]	; (80006d8 <MX_TIM2_Init+0x12c>)
 8000614:	f002 fe06 	bl	8003224 <HAL_TIM_Base_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800061e:	f000 fbed 	bl	8000dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000628:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800062c:	4619      	mov	r1, r3
 800062e:	482a      	ldr	r0, [pc, #168]	; (80006d8 <MX_TIM2_Init+0x12c>)
 8000630:	f003 fb2e 	bl	8003c90 <HAL_TIM_ConfigClockSource>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800063a:	f000 fbdf 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800063e:	4826      	ldr	r0, [pc, #152]	; (80006d8 <MX_TIM2_Init+0x12c>)
 8000640:	f002 fe92 	bl	8003368 <HAL_TIM_PWM_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800064a:	f000 fbd7 	bl	8000dfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800064e:	4822      	ldr	r0, [pc, #136]	; (80006d8 <MX_TIM2_Init+0x12c>)
 8000650:	f003 f86c 	bl	800372c <HAL_TIM_IC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800065a:	f000 fbcf 	bl	8000dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065e:	2300      	movs	r3, #0
 8000660:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000662:	2300      	movs	r3, #0
 8000664:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800066a:	4619      	mov	r1, r3
 800066c:	481a      	ldr	r0, [pc, #104]	; (80006d8 <MX_TIM2_Init+0x12c>)
 800066e:	f003 ffe5 	bl	800463c <HAL_TIMEx_MasterConfigSynchronization>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000678:	f000 fbc0 	bl	8000dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800067c:	2360      	movs	r3, #96	; 0x60
 800067e:	617b      	str	r3, [r7, #20]
  sConfigOC.Pulse = 100-1;
 8000680:	2363      	movs	r3, #99	; 0x63
 8000682:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	4810      	ldr	r0, [pc, #64]	; (80006d8 <MX_TIM2_Init+0x12c>)
 8000696:	f003 fa3d 	bl	8003b14 <HAL_TIM_PWM_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80006a0:	f000 fbac 	bl	8000dfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006a8:	2301      	movs	r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2204      	movs	r2, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4807      	ldr	r0, [pc, #28]	; (80006d8 <MX_TIM2_Init+0x12c>)
 80006bc:	f003 f996 	bl	80039ec <HAL_TIM_IC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
 80006c6:	f000 fb99 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006ca:	4803      	ldr	r0, [pc, #12]	; (80006d8 <MX_TIM2_Init+0x12c>)
 80006cc:	f000 fcc0 	bl	8001050 <HAL_TIM_MspPostInit>

}
 80006d0:	bf00      	nop
 80006d2:	3748      	adds	r7, #72	; 0x48
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000160 	.word	0x20000160

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f004 f802 	bl	800471c <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 fb6d 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200001a8 	.word	0x200001a8
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0310 	add.w	r3, r7, #16
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000744:	4b57      	ldr	r3, [pc, #348]	; (80008a4 <MX_GPIO_Init+0x174>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a56      	ldr	r2, [pc, #344]	; (80008a4 <MX_GPIO_Init+0x174>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b54      	ldr	r3, [pc, #336]	; (80008a4 <MX_GPIO_Init+0x174>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0310 	and.w	r3, r3, #16
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075c:	4b51      	ldr	r3, [pc, #324]	; (80008a4 <MX_GPIO_Init+0x174>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a50      	ldr	r2, [pc, #320]	; (80008a4 <MX_GPIO_Init+0x174>)
 8000762:	f043 0320 	orr.w	r3, r3, #32
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b4e      	ldr	r3, [pc, #312]	; (80008a4 <MX_GPIO_Init+0x174>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0320 	and.w	r3, r3, #32
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000774:	4b4b      	ldr	r3, [pc, #300]	; (80008a4 <MX_GPIO_Init+0x174>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a4a      	ldr	r2, [pc, #296]	; (80008a4 <MX_GPIO_Init+0x174>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b48      	ldr	r3, [pc, #288]	; (80008a4 <MX_GPIO_Init+0x174>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f003 0304 	and.w	r3, r3, #4
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078c:	4b45      	ldr	r3, [pc, #276]	; (80008a4 <MX_GPIO_Init+0x174>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a44      	ldr	r2, [pc, #272]	; (80008a4 <MX_GPIO_Init+0x174>)
 8000792:	f043 0308 	orr.w	r3, r3, #8
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <MX_GPIO_Init+0x174>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0308 	and.w	r3, r3, #8
 80007a0:	603b      	str	r3, [r7, #0]
 80007a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, f1_Pin|f2_Pin|f3_Pin|f4_Pin
 80007a4:	2200      	movs	r2, #0
 80007a6:	f640 71ff 	movw	r1, #4095	; 0xfff
 80007aa:	483f      	ldr	r0, [pc, #252]	; (80008a8 <MX_GPIO_Init+0x178>)
 80007ac:	f001 fbd6 	bl	8001f5c <HAL_GPIO_WritePin>
                          |l1_Pin|l2_Pin|l3_Pin|l4_Pin
                          |m1_Pin|m2_Pin|m3_Pin|m4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2120      	movs	r1, #32
 80007b4:	483d      	ldr	r0, [pc, #244]	; (80008ac <MX_GPIO_Init+0x17c>)
 80007b6:	f001 fbd1 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007c0:	483b      	ldr	r0, [pc, #236]	; (80008b0 <MX_GPIO_Init+0x180>)
 80007c2:	f001 fbcb 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007cc:	4b39      	ldr	r3, [pc, #228]	; (80008b4 <MX_GPIO_Init+0x184>)
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	4619      	mov	r1, r3
 80007da:	4833      	ldr	r0, [pc, #204]	; (80008a8 <MX_GPIO_Init+0x178>)
 80007dc:	f001 fa3a 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : f1_Pin f2_Pin f3_Pin f4_Pin
                           l1_Pin l2_Pin l3_Pin l4_Pin
                           m1_Pin m2_Pin m3_Pin m4_Pin */
  GPIO_InitStruct.Pin = f1_Pin|f2_Pin|f3_Pin|f4_Pin
 80007e0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80007e4:	613b      	str	r3, [r7, #16]
                          |l1_Pin|l2_Pin|l3_Pin|l4_Pin
                          |m1_Pin|m2_Pin|m3_Pin|m4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	482b      	ldr	r0, [pc, #172]	; (80008a8 <MX_GPIO_Init+0x178>)
 80007fa:	f001 fa2b 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007fe:	2320      	movs	r3, #32
 8000800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2302      	movs	r3, #2
 800080c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	4619      	mov	r1, r3
 8000814:	4825      	ldr	r0, [pc, #148]	; (80008ac <MX_GPIO_Init+0x17c>)
 8000816:	f001 fa1d 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : fsw4_Pin fsw2_Pin fsw3_Pin */
  GPIO_InitStruct.Pin = fsw4_Pin|fsw2_Pin|fsw3_Pin;
 800081a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800081e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <MX_GPIO_Init+0x188>)
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	4820      	ldr	r0, [pc, #128]	; (80008b0 <MX_GPIO_Init+0x180>)
 8000830:	f001 fa10 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : fsw1_Pin */
  GPIO_InitStruct.Pin = fsw1_Pin;
 8000834:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800083a:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_GPIO_Init+0x188>)
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(fsw1_GPIO_Port, &GPIO_InitStruct);
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	4818      	ldr	r0, [pc, #96]	; (80008ac <MX_GPIO_Init+0x17c>)
 800084a:	f001 fa03 	bl	8001c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800084e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2302      	movs	r3, #2
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4619      	mov	r1, r3
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <MX_GPIO_Init+0x180>)
 8000868:	f001 f9f4 	bl	8001c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	200a      	movs	r0, #10
 8000872:	f001 f9b8 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000876:	200a      	movs	r0, #10
 8000878:	f001 f9d1 	bl	8001c1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2100      	movs	r1, #0
 8000880:	2017      	movs	r0, #23
 8000882:	f001 f9b0 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000886:	2017      	movs	r0, #23
 8000888:	f001 f9c9 	bl	8001c1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800088c:	2200      	movs	r2, #0
 800088e:	2100      	movs	r1, #0
 8000890:	2028      	movs	r0, #40	; 0x28
 8000892:	f001 f9a8 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000896:	2028      	movs	r0, #40	; 0x28
 8000898:	f001 f9c1 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40011000 	.word	0x40011000
 80008ac:	40010800 	.word	0x40010800
 80008b0:	40010c00 	.word	0x40010c00
 80008b4:	10110000 	.word	0x10110000
 80008b8:	10210000 	.word	0x10210000

080008bc <HAL_GPIO_EXTI_Callback>:
uint8_t Captureflag=0;
uint32_t IC1,IC2;
uint8_t alarm=0;
char print[10];
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==fsw1_Pin&&roll_d==0)
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008cc:	d110      	bne.n	80008f0 <HAL_GPIO_EXTI_Callback+0x34>
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <HAL_GPIO_EXTI_Callback+0xb8>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d10c      	bne.n	80008f0 <HAL_GPIO_EXTI_Callback+0x34>
	{
		flo=1;
 80008d6:	4b28      	ldr	r3, [pc, #160]	; (8000978 <HAL_GPIO_EXTI_Callback+0xbc>)
 80008d8:	2201      	movs	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, f1_Pin, 1);
 80008dc:	2201      	movs	r2, #1
 80008de:	2101      	movs	r1, #1
 80008e0:	4826      	ldr	r0, [pc, #152]	; (800097c <HAL_GPIO_EXTI_Callback+0xc0>)
 80008e2:	f001 fb3b 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, 0xf-f1_Pin, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	210e      	movs	r1, #14
 80008ea:	4824      	ldr	r0, [pc, #144]	; (800097c <HAL_GPIO_EXTI_Callback+0xc0>)
 80008ec:	f001 fb36 	bl	8001f5c <HAL_GPIO_WritePin>

	}
	if(GPIO_Pin==fsw2_Pin&&roll_d==0)
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	2b10      	cmp	r3, #16
 80008f4:	d110      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x5c>
 80008f6:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <HAL_GPIO_EXTI_Callback+0xb8>)
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10c      	bne.n	8000918 <HAL_GPIO_EXTI_Callback+0x5c>
	{
		flo=2;
 80008fe:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000900:	2202      	movs	r2, #2
 8000902:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, f2_Pin, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	2102      	movs	r1, #2
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <HAL_GPIO_EXTI_Callback+0xc0>)
 800090a:	f001 fb27 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, 0xf-f2_Pin, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	210d      	movs	r1, #13
 8000912:	481a      	ldr	r0, [pc, #104]	; (800097c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000914:	f001 fb22 	bl	8001f5c <HAL_GPIO_WritePin>

	}
	if(GPIO_Pin==fsw3_Pin&&roll_d==0)
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	2b20      	cmp	r3, #32
 800091c:	d110      	bne.n	8000940 <HAL_GPIO_EXTI_Callback+0x84>
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_GPIO_EXTI_Callback+0xb8>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d10c      	bne.n	8000940 <HAL_GPIO_EXTI_Callback+0x84>
	{
		flo=3;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000928:	2203      	movs	r2, #3
 800092a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, f3_Pin, 1);
 800092c:	2201      	movs	r2, #1
 800092e:	2104      	movs	r1, #4
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000932:	f001 fb13 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, 0xf-f3_Pin, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210b      	movs	r1, #11
 800093a:	4810      	ldr	r0, [pc, #64]	; (800097c <HAL_GPIO_EXTI_Callback+0xc0>)
 800093c:	f001 fb0e 	bl	8001f5c <HAL_GPIO_WritePin>

	}
	if(GPIO_Pin==fsw4_Pin&&roll_d==0)
 8000940:	88fb      	ldrh	r3, [r7, #6]
 8000942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000946:	d110      	bne.n	800096a <HAL_GPIO_EXTI_Callback+0xae>
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_GPIO_EXTI_Callback+0xb8>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d10c      	bne.n	800096a <HAL_GPIO_EXTI_Callback+0xae>
	{
		flo=4;
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_GPIO_EXTI_Callback+0xbc>)
 8000952:	2204      	movs	r2, #4
 8000954:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, f4_Pin, 1);
 8000956:	2201      	movs	r2, #1
 8000958:	2108      	movs	r1, #8
 800095a:	4808      	ldr	r0, [pc, #32]	; (800097c <HAL_GPIO_EXTI_Callback+0xc0>)
 800095c:	f001 fafe 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, 0xf-f4_Pin, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2107      	movs	r1, #7
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_GPIO_EXTI_Callback+0xc0>)
 8000966:	f001 faf9 	bl	8001f5c <HAL_GPIO_WritePin>
	/*if(GPIO_Pin==fsw4_Pin&&roll_d==0)
	{
		flo=4;
		HAL_GPIO_WritePin(GPIOC, 0xf, 1);
	}*/
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200001ec 	.word	0x200001ec
 8000978:	20000000 	.word	0x20000000
 800097c:	40011000 	.word	0x40011000

08000980 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	if(flo<location)
 8000988:	4b57      	ldr	r3, [pc, #348]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800098a:	781a      	ldrb	r2, [r3, #0]
 800098c:	4b57      	ldr	r3, [pc, #348]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	d24a      	bcs.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0xaa>
	{
		roll(roll_t);
 8000994:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4618      	mov	r0, r3
 800099a:	f000 f963 	bl	8000c64 <roll>
		roll_t += 1;
 800099e:	4b54      	ldr	r3, [pc, #336]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b52      	ldr	r3, [pc, #328]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009a8:	701a      	strb	r2, [r3, #0]
		if(roll_t>5)
 80009aa:	4b51      	ldr	r3, [pc, #324]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b05      	cmp	r3, #5
 80009b0:	d902      	bls.n	80009b8 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			roll_t=1;
 80009b2:	4b4f      	ldr	r3, [pc, #316]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	701a      	strb	r2, [r3, #0]
		}

		lcd_put_cur(1,0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff fc26 	bl	800020c <lcd_put_cur>
		lcd_send_string ("DOWN");
 80009c0:	484c      	ldr	r0, [pc, #304]	; (8000af4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80009c2:	f7ff fc7f 	bl	80002c4 <lcd_send_string>
		show_dot(roll_d);
 80009c6:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f99c 	bl	8000d08 <show_dot>

		roll_d+=1;
 80009d0:	4b49      	ldr	r3, [pc, #292]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	3301      	adds	r3, #1
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80009da:	801a      	strh	r2, [r3, #0]
		if(roll_d==4000)
 80009dc:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80009e4:	d121      	bne.n	8000a2a <HAL_TIM_PeriodElapsedCallback+0xaa>
		{
			roll_d=0;
 80009e6:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	801a      	strh	r2, [r3, #0]
			location-=1;
 80009ec:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b3d      	ldr	r3, [pc, #244]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80009f6:	701a      	strb	r2, [r3, #0]
			ready();
 80009f8:	f000 f9de 	bl	8000db8 <ready>
			flo_led=flo_led>>1;
 80009fc:	4b3f      	ldr	r3, [pc, #252]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b3d      	ldr	r3, [pc, #244]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000a06:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, flo_led, 1);
 8000a08:	4b3c      	ldr	r3, [pc, #240]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	483b      	ldr	r0, [pc, #236]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000a12:	f001 faa3 	bl	8001f5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, 0xf0-flo_led, 0);
 8000a16:	4b39      	ldr	r3, [pc, #228]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4836      	ldr	r0, [pc, #216]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000a26:	f001 fa99 	bl	8001f5c <HAL_GPIO_WritePin>
		}
	}
	if(flo>location)
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000a2c:	781a      	ldrb	r2, [r3, #0]
 8000a2e:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d94a      	bls.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x14c>
	{
		roll(roll_t);
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f912 	bl	8000c64 <roll>
		roll_t -= 1;
 8000a40:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a4a:	701a      	strb	r2, [r3, #0]
		if(roll_t<1)
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <HAL_TIM_PeriodElapsedCallback+0xda>
		{
			roll_t=4;
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	701a      	strb	r2, [r3, #0]
		}

		lcd_put_cur(1,0);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f7ff fbd5 	bl	800020c <lcd_put_cur>
		lcd_send_string ("UP");
 8000a62:	4828      	ldr	r0, [pc, #160]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000a64:	f7ff fc2e 	bl	80002c4 <lcd_send_string>
		show_dot(roll_d);
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f94b 	bl	8000d08 <show_dot>

		roll_d+=1;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000a7c:	801a      	strh	r2, [r3, #0]
		if(roll_d==4000)
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000a86:	d121      	bne.n	8000acc <HAL_TIM_PeriodElapsedCallback+0x14c>
		{
			roll_d=0;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	801a      	strh	r2, [r3, #0]
			location+=1;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	b2da      	uxtb	r2, r3
 8000a96:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000a98:	701a      	strb	r2, [r3, #0]
			ready();
 8000a9a:	f000 f98d 	bl	8000db8 <ready>
			flo_led=flo_led<<1;
 8000a9e:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000aa8:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, flo_led, 1);
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000aac:	881b      	ldrh	r3, [r3, #0]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4813      	ldr	r0, [pc, #76]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ab4:	f001 fa52 	bl	8001f5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, 0xf0-flo_led, 0);
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000ac8:	f001 fa48 	bl	8001f5c <HAL_GPIO_WritePin>
		}
	}
	if(flo==location)
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d102      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x15e>
	{
		roll(0);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 f8c3 	bl	8000c64 <roll>
	}

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000001 	.word	0x20000001
 8000af0:	20000002 	.word	0x20000002
 8000af4:	08005244 	.word	0x08005244
 8000af8:	200001ec 	.word	0x200001ec
 8000afc:	20000004 	.word	0x20000004
 8000b00:	40011000 	.word	0x40011000
 8000b04:	0800524c 	.word	0x0800524c

08000b08 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
	if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7f1b      	ldrb	r3, [r3, #28]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d15f      	bne.n	8000bd8 <HAL_TIM_IC_CaptureCallback+0xd0>
	{
		if(Captureflag==0)
 8000b18:	4b46      	ldr	r3, [pc, #280]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d121      	bne.n	8000b64 <HAL_TIM_IC_CaptureCallback+0x5c>
		{
			IC1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b20:	2104      	movs	r1, #4
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f003 f978 	bl	8003e18 <HAL_TIM_ReadCapturedValue>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4a43      	ldr	r2, [pc, #268]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000b2c:	6013      	str	r3, [r2, #0]
			Captureflag=!Captureflag;
 8000b2e:	4b41      	ldr	r3, [pc, #260]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	bf0c      	ite	eq
 8000b36:	2301      	moveq	r3, #1
 8000b38:	2300      	movne	r3, #0
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b3d      	ldr	r3, [pc, #244]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b40:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6a1a      	ldr	r2, [r3, #32]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000b50:	621a      	str	r2, [r3, #32]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6a1a      	ldr	r2, [r3, #32]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f042 0220 	orr.w	r2, r2, #32
 8000b60:	621a      	str	r2, [r3, #32]
 8000b62:	e039      	b.n	8000bd8 <HAL_TIM_IC_CaptureCallback+0xd0>
		}
		else if(Captureflag==1)
 8000b64:	4b33      	ldr	r3, [pc, #204]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d135      	bne.n	8000bd8 <HAL_TIM_IC_CaptureCallback+0xd0>
		{
			IC2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f003 f952 	bl	8003e18 <HAL_TIM_ReadCapturedValue>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a31      	ldr	r2, [pc, #196]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000b78:	6013      	str	r3, [r2, #0]
			Captureflag=!Captureflag;
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bf0c      	ite	eq
 8000b82:	2301      	moveq	r3, #1
 8000b84:	2300      	movne	r3, #0
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000b8c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6a1a      	ldr	r2, [r3, #32]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000b9c:	621a      	str	r2, [r3, #32]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6a12      	ldr	r2, [r2, #32]
 8000ba8:	621a      	str	r2, [r3, #32]
			if(IC2-IC1<800)
 8000baa:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_TIM_IC_CaptureCallback+0x134>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000bb8:	d207      	bcs.n	8000bca <HAL_TIM_IC_CaptureCallback+0xc2>
			{
				lcd_put_cur(0,8);
 8000bba:	2108      	movs	r1, #8
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f7ff fb25 	bl	800020c <lcd_put_cur>
				lcd_send_string ("approach");
 8000bc2:	481f      	ldr	r0, [pc, #124]	; (8000c40 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000bc4:	f7ff fb7e 	bl	80002c4 <lcd_send_string>
 8000bc8:	e006      	b.n	8000bd8 <HAL_TIM_IC_CaptureCallback+0xd0>
			}
			else
			{
				lcd_put_cur(0,8);
 8000bca:	2108      	movs	r1, #8
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f7ff fb1d 	bl	800020c <lcd_put_cur>
				lcd_send_string ("nothing ");
 8000bd2:	481c      	ldr	r0, [pc, #112]	; (8000c44 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000bd4:	f7ff fb76 	bl	80002c4 <lcd_send_string>
			}
		}

	}
	flame=HAL_ADC_GetValue(&hadc1);
 8000bd8:	481b      	ldr	r0, [pc, #108]	; (8000c48 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000bda:	f000 fd8d 	bl	80016f8 <HAL_ADC_GetValue>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4a1a      	ldr	r2, [pc, #104]	; (8000c4c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000be2:	6013      	str	r3, [r2, #0]
	if(flame<3900)
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d806      	bhi.n	8000bfe <HAL_TIM_IC_CaptureCallback+0xf6>
	{
		location=flo;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000bf6:	701a      	strb	r2, [r3, #0]
		alarm=1;
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
	}
	if(alarm==1)
 8000bfe:	4b16      	ldr	r3, [pc, #88]	; (8000c58 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d111      	bne.n	8000c2a <HAL_TIM_IC_CaptureCallback+0x122>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8);
 8000c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000c0c:	f001 f9be 	bl	8001f8c <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c16:	4811      	ldr	r0, [pc, #68]	; (8000c5c <HAL_TIM_IC_CaptureCallback+0x154>)
 8000c18:	f001 f9a0 	bl	8001f5c <HAL_GPIO_WritePin>
		lcd_put_cur(1,8);
 8000c1c:	2108      	movs	r1, #8
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff faf4 	bl	800020c <lcd_put_cur>
		lcd_send_string ("escape");
 8000c24:	480e      	ldr	r0, [pc, #56]	; (8000c60 <HAL_TIM_IC_CaptureCallback+0x158>)
 8000c26:	f7ff fb4d 	bl	80002c4 <lcd_send_string>
	}

}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001f4 	.word	0x200001f4
 8000c38:	200001f8 	.word	0x200001f8
 8000c3c:	200001fc 	.word	0x200001fc
 8000c40:	08005250 	.word	0x08005250
 8000c44:	0800525c 	.word	0x0800525c
 8000c48:	20000094 	.word	0x20000094
 8000c4c:	200001f0 	.word	0x200001f0
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000001 	.word	0x20000001
 8000c58:	20000200 	.word	0x20000200
 8000c5c:	40010c00 	.word	0x40010c00
 8000c60:	08005268 	.word	0x08005268

08000c64 <roll>:
void roll(uint8_t i)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	if(i==1)
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10c      	bne.n	8000c8e <roll+0x2a>
	{
		HAL_GPIO_WritePin(GPIOC, m1_Pin+m2_Pin, 1);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000c7a:	4822      	ldr	r0, [pc, #136]	; (8000d04 <roll+0xa0>)
 8000c7c:	f001 f96e 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, 0xf00-m1_Pin-m2_Pin, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000c86:	481f      	ldr	r0, [pc, #124]	; (8000d04 <roll+0xa0>)
 8000c88:	f001 f968 	bl	8001f5c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(GPIOC, 0xf00, 0);
	}
}
 8000c8c:	e035      	b.n	8000cfa <roll+0x96>
	else if(i==2)
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d10c      	bne.n	8000cae <roll+0x4a>
		HAL_GPIO_WritePin(GPIOC, m2_Pin+m3_Pin, 1);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000c9a:	481a      	ldr	r0, [pc, #104]	; (8000d04 <roll+0xa0>)
 8000c9c:	f001 f95e 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, 0xf00-m2_Pin-m3_Pin, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000ca6:	4817      	ldr	r0, [pc, #92]	; (8000d04 <roll+0xa0>)
 8000ca8:	f001 f958 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000cac:	e025      	b.n	8000cfa <roll+0x96>
	else if(i==3)
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d10c      	bne.n	8000cce <roll+0x6a>
		HAL_GPIO_WritePin(GPIOC, m3_Pin+m4_Pin, 1);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000cba:	4812      	ldr	r0, [pc, #72]	; (8000d04 <roll+0xa0>)
 8000cbc:	f001 f94e 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, 0xf00-m3_Pin-m4_Pin, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000cc6:	480f      	ldr	r0, [pc, #60]	; (8000d04 <roll+0xa0>)
 8000cc8:	f001 f948 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000ccc:	e015      	b.n	8000cfa <roll+0x96>
	else if(i==4)
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d10c      	bne.n	8000cee <roll+0x8a>
		HAL_GPIO_WritePin(GPIOC, m4_Pin+m1_Pin, 1);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <roll+0xa0>)
 8000cdc:	f001 f93e 	bl	8001f5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, 0xf00-m4_Pin-m1_Pin, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8000ce6:	4807      	ldr	r0, [pc, #28]	; (8000d04 <roll+0xa0>)
 8000ce8:	f001 f938 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000cec:	e005      	b.n	8000cfa <roll+0x96>
		HAL_GPIO_WritePin(GPIOC, 0xf00, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000cf4:	4803      	ldr	r0, [pc, #12]	; (8000d04 <roll+0xa0>)
 8000cf6:	f001 f931 	bl	8001f5c <HAL_GPIO_WritePin>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40011000 	.word	0x40011000

08000d08 <show_dot>:
void show_dot(uint16_t roll_d)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]
	if(roll_d%500==1)
 8000d12:	88fb      	ldrh	r3, [r7, #6]
 8000d14:	4a23      	ldr	r2, [pc, #140]	; (8000da4 <show_dot+0x9c>)
 8000d16:	fba2 1203 	umull	r1, r2, r2, r3
 8000d1a:	0952      	lsrs	r2, r2, #5
 8000d1c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d20:	fb01 f202 	mul.w	r2, r1, r2
 8000d24:	1a9b      	subs	r3, r3, r2
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d103      	bne.n	8000d34 <show_dot+0x2c>
	{
		lcd_send_string ("   ");
 8000d2c:	481e      	ldr	r0, [pc, #120]	; (8000da8 <show_dot+0xa0>)
 8000d2e:	f7ff fac9 	bl	80002c4 <lcd_send_string>
	}
	else if(roll_d%500==376)
	{
		lcd_send_string ("...");
	}
}
 8000d32:	e032      	b.n	8000d9a <show_dot+0x92>
	else if(roll_d%500==126)
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <show_dot+0x9c>)
 8000d38:	fba2 1203 	umull	r1, r2, r2, r3
 8000d3c:	0952      	lsrs	r2, r2, #5
 8000d3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d42:	fb01 f202 	mul.w	r2, r1, r2
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	b29b      	uxth	r3, r3
 8000d4a:	2b7e      	cmp	r3, #126	; 0x7e
 8000d4c:	d103      	bne.n	8000d56 <show_dot+0x4e>
		lcd_send_string (".  ");
 8000d4e:	4817      	ldr	r0, [pc, #92]	; (8000dac <show_dot+0xa4>)
 8000d50:	f7ff fab8 	bl	80002c4 <lcd_send_string>
}
 8000d54:	e021      	b.n	8000d9a <show_dot+0x92>
	else if(roll_d%500==251)
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <show_dot+0x9c>)
 8000d5a:	fba2 1203 	umull	r1, r2, r2, r3
 8000d5e:	0952      	lsrs	r2, r2, #5
 8000d60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d64:	fb01 f202 	mul.w	r2, r1, r2
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	2bfb      	cmp	r3, #251	; 0xfb
 8000d6e:	d103      	bne.n	8000d78 <show_dot+0x70>
		lcd_send_string (".. ");
 8000d70:	480f      	ldr	r0, [pc, #60]	; (8000db0 <show_dot+0xa8>)
 8000d72:	f7ff faa7 	bl	80002c4 <lcd_send_string>
}
 8000d76:	e010      	b.n	8000d9a <show_dot+0x92>
	else if(roll_d%500==376)
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <show_dot+0x9c>)
 8000d7c:	fba2 1203 	umull	r1, r2, r2, r3
 8000d80:	0952      	lsrs	r2, r2, #5
 8000d82:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d86:	fb01 f202 	mul.w	r2, r1, r2
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8000d92:	d102      	bne.n	8000d9a <show_dot+0x92>
		lcd_send_string ("...");
 8000d94:	4807      	ldr	r0, [pc, #28]	; (8000db4 <show_dot+0xac>)
 8000d96:	f7ff fa95 	bl	80002c4 <lcd_send_string>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	10624dd3 	.word	0x10624dd3
 8000da8:	08005270 	.word	0x08005270
 8000dac:	08005274 	.word	0x08005274
 8000db0:	08005278 	.word	0x08005278
 8000db4:	0800527c 	.word	0x0800527c

08000db8 <ready>:
void ready()
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	sprintf(print,"%dF",location);
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <ready+0x34>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	490b      	ldr	r1, [pc, #44]	; (8000df0 <ready+0x38>)
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <ready+0x3c>)
 8000dc6:	f003 fdb7 	bl	8004938 <siprintf>
	lcd_put_cur(0,0);
 8000dca:	2100      	movs	r1, #0
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fa1d 	bl	800020c <lcd_put_cur>
	lcd_send_string (print);
 8000dd2:	4808      	ldr	r0, [pc, #32]	; (8000df4 <ready+0x3c>)
 8000dd4:	f7ff fa76 	bl	80002c4 <lcd_send_string>
	lcd_put_cur(1,0);
 8000dd8:	2100      	movs	r1, #0
 8000dda:	2001      	movs	r0, #1
 8000ddc:	f7ff fa16 	bl	800020c <lcd_put_cur>
	lcd_send_string ("Ready  ");
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <ready+0x40>)
 8000de2:	f7ff fa6f 	bl	80002c4 <lcd_send_string>
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000001 	.word	0x20000001
 8000df0:	08005280 	.word	0x08005280
 8000df4:	20000204 	.word	0x20000204
 8000df8:	08005284 	.word	0x08005284

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6193      	str	r3, [r2, #24]
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e1c:	699b      	ldr	r3, [r3, #24]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x5c>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_MspInit+0x60>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_MspInit+0x60>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000

08000e6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <HAL_ADC_MspInit+0x6c>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d121      	bne.n	8000ed0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a12      	ldr	r2, [pc, #72]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000e92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_ADC_MspInit+0x70>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <HAL_ADC_MspInit+0x74>)
 8000ecc:	f000 fec2 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ed0:	bf00      	nop
 8000ed2:	3720      	adds	r7, #32
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40012400 	.word	0x40012400
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010800 	.word	0x40010800

08000ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <HAL_I2C_MspInit+0x70>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d123      	bne.n	8000f4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <HAL_I2C_MspInit+0x74>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a13      	ldr	r2, [pc, #76]	; (8000f58 <HAL_I2C_MspInit+0x74>)
 8000f0a:	f043 0308 	orr.w	r3, r3, #8
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_I2C_MspInit+0x74>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0308 	and.w	r3, r3, #8
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f1c:	23c0      	movs	r3, #192	; 0xc0
 8000f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f20:	2312      	movs	r3, #18
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <HAL_I2C_MspInit+0x78>)
 8000f30:	f000 fe90 	bl	8001c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <HAL_I2C_MspInit+0x74>)
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_I2C_MspInit+0x74>)
 8000f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f3e:	61d3      	str	r3, [r2, #28]
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_I2C_MspInit+0x74>)
 8000f42:	69db      	ldr	r3, [r3, #28]
 8000f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f4c:	bf00      	nop
 8000f4e:	3720      	adds	r7, #32
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40005400 	.word	0x40005400
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	40010c00 	.word	0x40010c00

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 0318 	add.w	r3, r7, #24
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a32      	ldr	r2, [pc, #200]	; (8001044 <HAL_TIM_Base_MspInit+0xe4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d12c      	bne.n	8000fda <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f80:	4b31      	ldr	r3, [pc, #196]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a30      	ldr	r2, [pc, #192]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 8000f86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f94:	617b      	str	r3, [r7, #20]
 8000f96:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	2018      	movs	r0, #24
 8000f9e:	f000 fe22 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000fa2:	2018      	movs	r0, #24
 8000fa4:	f000 fe3b 	bl	8001c1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	2019      	movs	r0, #25
 8000fae:	f000 fe1a 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000fb2:	2019      	movs	r0, #25
 8000fb4:	f000 fe33 	bl	8001c1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	201a      	movs	r0, #26
 8000fbe:	f000 fe12 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000fc2:	201a      	movs	r0, #26
 8000fc4:	f000 fe2b 	bl	8001c1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	201b      	movs	r0, #27
 8000fce:	f000 fe0a 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000fd2:	201b      	movs	r0, #27
 8000fd4:	f000 fe23 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fd8:	e030      	b.n	800103c <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe2:	d12b      	bne.n	800103c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe4:	4b18      	ldr	r3, [pc, #96]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	4a17      	ldr	r2, [pc, #92]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 8000fea:	f043 0301 	orr.w	r3, r3, #1
 8000fee:	61d3      	str	r3, [r2, #28]
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6193      	str	r3, [r2, #24]
 8001008:	4b0f      	ldr	r3, [pc, #60]	; (8001048 <HAL_TIM_Base_MspInit+0xe8>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001014:	2302      	movs	r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0318 	add.w	r3, r7, #24
 8001024:	4619      	mov	r1, r3
 8001026:	4809      	ldr	r0, [pc, #36]	; (800104c <HAL_TIM_Base_MspInit+0xec>)
 8001028:	f000 fe14 	bl	8001c54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	201c      	movs	r0, #28
 8001032:	f000 fdd8 	bl	8001be6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001036:	201c      	movs	r0, #28
 8001038:	f000 fdf1 	bl	8001c1e <HAL_NVIC_EnableIRQ>
}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40012c00 	.word	0x40012c00
 8001048:	40021000 	.word	0x40021000
 800104c:	40010800 	.word	0x40010800

08001050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800106e:	d117      	bne.n	80010a0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_TIM_MspPostInit+0x58>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_TIM_MspPostInit+0x58>)
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_TIM_MspPostInit+0x58>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2302      	movs	r3, #2
 8001092:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4619      	mov	r1, r3
 800109a:	4804      	ldr	r0, [pc, #16]	; (80010ac <HAL_TIM_MspPostInit+0x5c>)
 800109c:	f000 fdda 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40010800 	.word	0x40010800

080010b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a15      	ldr	r2, [pc, #84]	; (8001120 <HAL_UART_MspInit+0x70>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d123      	bne.n	8001118 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010d2:	69db      	ldr	r3, [r3, #28]
 80010d4:	4a13      	ldr	r2, [pc, #76]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010da:	61d3      	str	r3, [r2, #28]
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_UART_MspInit+0x74>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001100:	230c      	movs	r3, #12
 8001102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2302      	movs	r3, #2
 800110a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_UART_MspInit+0x78>)
 8001114:	f000 fd9e 	bl	8001c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001118:	bf00      	nop
 800111a:	3720      	adds	r7, #32
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40004400 	.word	0x40004400
 8001124:	40021000 	.word	0x40021000
 8001128:	40010800 	.word	0x40010800

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <NMI_Handler+0x4>

08001132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <HardFault_Handler+0x4>

08001138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <MemManage_Handler+0x4>

0800113e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001142:	e7fe      	b.n	8001142 <BusFault_Handler+0x4>

08001144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <UsageFault_Handler+0x4>

0800114a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001172:	f000 f8fb 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(fsw2_Pin);
 800117e:	2010      	movs	r0, #16
 8001180:	f000 ff1e 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(fsw3_Pin);
 800118c:	2020      	movs	r0, #32
 800118e:	f000 ff17 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(fsw1_Pin);
 8001192:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001196:	f000 ff13 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM1_BRK_IRQHandler+0x10>)
 80011a6:	f002 fb19 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000118 	.word	0x20000118

080011b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM1_UP_IRQHandler+0x10>)
 80011ba:	f002 fb0f 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000118 	.word	0x20000118

080011c8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80011ce:	f002 fb05 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000118 	.word	0x20000118

080011dc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <TIM1_CC_IRQHandler+0x10>)
 80011e2:	f002 fafb 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000118 	.word	0x20000118

080011f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <TIM2_IRQHandler+0x10>)
 80011f6:	f002 faf1 	bl	80037dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000160 	.word	0x20000160

08001204 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(fsw4_Pin);
 8001208:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800120c:	f000 fed8 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001210:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001214:	f000 fed4 	bl	8001fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}

0800121c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001224:	4a14      	ldr	r2, [pc, #80]	; (8001278 <_sbrk+0x5c>)
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <_sbrk+0x60>)
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <_sbrk+0x64>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <_sbrk+0x64>)
 800123a:	4a12      	ldr	r2, [pc, #72]	; (8001284 <_sbrk+0x68>)
 800123c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <_sbrk+0x64>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	429a      	cmp	r2, r3
 800124a:	d207      	bcs.n	800125c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800124c:	f003 fb42 	bl	80048d4 <__errno>
 8001250:	4603      	mov	r3, r0
 8001252:	220c      	movs	r2, #12
 8001254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001256:	f04f 33ff 	mov.w	r3, #4294967295
 800125a:	e009      	b.n	8001270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <_sbrk+0x64>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <_sbrk+0x64>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4413      	add	r3, r2
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <_sbrk+0x64>)
 800126c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800126e:	68fb      	ldr	r3, [r7, #12]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20005000 	.word	0x20005000
 800127c:	00000400 	.word	0x00000400
 8001280:	20000210 	.word	0x20000210
 8001284:	20000228 	.word	0x20000228

08001288 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	; (80012c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	; (80012cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	; (80012d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ba:	f7ff ffe5 	bl	8001288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012be:	f003 fb0f 	bl	80048e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c2:	f7ff f815 	bl	80002f0 <main>
  bx lr
 80012c6:	4770      	bx	lr
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80012d0:	080052f0 	.word	0x080052f0
  ldr r2, =_sbss
 80012d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80012d8:	20000228 	.word	0x20000228

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <HAL_Init+0x28>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <HAL_Init+0x28>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 fc6d 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fd84 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 fc85 	bl	8001c3a <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295
 8001348:	f000 fc4d 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	; (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000008 	.word	0x20000008
 8001364:	20000010 	.word	0x20000010
 8001368:	2000000c 	.word	0x2000000c

0800136c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <HAL_IncTick+0x1c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_IncTick+0x20>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a03      	ldr	r2, [pc, #12]	; (800138c <HAL_IncTick+0x20>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000010 	.word	0x20000010
 800138c:	20000214 	.word	0x20000214

08001390 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <HAL_GetTick+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	20000214 	.word	0x20000214

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff fff0 	bl	8001390 <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffe0 	bl	8001390 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000010 	.word	0x20000010

080013ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0be      	b.n	800158c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	2b00      	cmp	r3, #0
 800141a:	d109      	bne.n	8001430 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fd1e 	bl	8000e6c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f000 fabf 	bl	80019b4 <ADC_ConversionStop_Disable>
 8001436:	4603      	mov	r3, r0
 8001438:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	f003 0310 	and.w	r3, r3, #16
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 8099 	bne.w	800157a <HAL_ADC_Init+0x18e>
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 8095 	bne.w	800157a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001458:	f023 0302 	bic.w	r3, r3, #2
 800145c:	f043 0202 	orr.w	r2, r3, #2
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800146c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	7b1b      	ldrb	r3, [r3, #12]
 8001472:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001474:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	4313      	orrs	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001484:	d003      	beq.n	800148e <HAL_ADC_Init+0xa2>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d102      	bne.n	8001494 <HAL_ADC_Init+0xa8>
 800148e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001492:	e000      	b.n	8001496 <HAL_ADC_Init+0xaa>
 8001494:	2300      	movs	r3, #0
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	7d1b      	ldrb	r3, [r3, #20]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d119      	bne.n	80014d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7b1b      	ldrb	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	3b01      	subs	r3, #1
 80014b2:	035a      	lsls	r2, r3, #13
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	e00b      	b.n	80014d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c4:	f043 0220 	orr.w	r2, r3, #32
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d0:	f043 0201 	orr.w	r2, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <HAL_ADC_Init+0x1a8>)
 80014f4:	4013      	ands	r3, r2
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001508:	d003      	beq.n	8001512 <HAL_ADC_Init+0x126>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d104      	bne.n	800151c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	3b01      	subs	r3, #1
 8001518:	051b      	lsls	r3, r3, #20
 800151a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	430a      	orrs	r2, r1
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_ADC_Init+0x1ac>)
 8001538:	4013      	ands	r3, r2
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	429a      	cmp	r2, r3
 800153e:	d10b      	bne.n	8001558 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154a:	f023 0303 	bic.w	r3, r3, #3
 800154e:	f043 0201 	orr.w	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001556:	e018      	b.n	800158a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800155c:	f023 0312 	bic.w	r3, r3, #18
 8001560:	f043 0210 	orr.w	r2, r3, #16
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001578:	e007      	b.n	800158a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157e:	f043 0210 	orr.w	r2, r3, #16
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800158a:	7dfb      	ldrb	r3, [r7, #23]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	ffe1f7fd 	.word	0xffe1f7fd
 8001598:	ff1f0efe 	.word	0xff1f0efe

0800159c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_ADC_Start+0x1a>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e098      	b.n	80016e8 <HAL_ADC_Start+0x14c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f99e 	bl	8001900 <ADC_Enable>
 80015c4:	4603      	mov	r3, r0
 80015c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 8087 	bne.w	80016de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015d8:	f023 0301 	bic.w	r3, r3, #1
 80015dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a41      	ldr	r2, [pc, #260]	; (80016f0 <HAL_ADC_Start+0x154>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d105      	bne.n	80015fa <HAL_ADC_Start+0x5e>
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_ADC_Start+0x158>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d115      	bne.n	8001626 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d026      	beq.n	8001662 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800161c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001624:	e01d      	b.n	8001662 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2f      	ldr	r2, [pc, #188]	; (80016f4 <HAL_ADC_Start+0x158>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d004      	beq.n	8001646 <HAL_ADC_Start+0xaa>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a2b      	ldr	r2, [pc, #172]	; (80016f0 <HAL_ADC_Start+0x154>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d10d      	bne.n	8001662 <HAL_ADC_Start+0xc6>
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_ADC_Start+0x158>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	f023 0206 	bic.w	r2, r3, #6
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
 800167a:	e002      	b.n	8001682 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f06f 0202 	mvn.w	r2, #2
 8001692:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800169e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016a2:	d113      	bne.n	80016cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016a8:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_ADC_Start+0x154>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d105      	bne.n	80016ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_ADC_Start+0x158>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d108      	bne.n	80016cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	e00c      	b.n	80016e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	e003      	b.n	80016e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40012800 	.word	0x40012800
 80016f4:	40012400 	.word	0x40012400

080016f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x20>
 800172c:	2302      	movs	r3, #2
 800172e:	e0dc      	b.n	80018ea <HAL_ADC_ConfigChannel+0x1da>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b06      	cmp	r3, #6
 800173e:	d81c      	bhi.n	800177a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	3b05      	subs	r3, #5
 8001752:	221f      	movs	r2, #31
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	4019      	ands	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	3b05      	subs	r3, #5
 800176c:	fa00 f203 	lsl.w	r2, r0, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	635a      	str	r2, [r3, #52]	; 0x34
 8001778:	e03c      	b.n	80017f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d81c      	bhi.n	80017bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	4413      	add	r3, r2
 8001792:	3b23      	subs	r3, #35	; 0x23
 8001794:	221f      	movs	r2, #31
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	4019      	ands	r1, r3
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	6818      	ldr	r0, [r3, #0]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b23      	subs	r3, #35	; 0x23
 80017ae:	fa00 f203 	lsl.w	r2, r0, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ba:	e01b      	b.n	80017f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b41      	subs	r3, #65	; 0x41
 80017ce:	221f      	movs	r2, #31
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4019      	ands	r1, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4613      	mov	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4413      	add	r3, r2
 80017e6:	3b41      	subs	r3, #65	; 0x41
 80017e8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b09      	cmp	r3, #9
 80017fa:	d91c      	bls.n	8001836 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68d9      	ldr	r1, [r3, #12]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	3b1e      	subs	r3, #30
 800180e:	2207      	movs	r2, #7
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	4019      	ands	r1, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	6898      	ldr	r0, [r3, #8]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	3b1e      	subs	r3, #30
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	e019      	b.n	800186a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6919      	ldr	r1, [r3, #16]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	2207      	movs	r2, #7
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	4019      	ands	r1, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	6898      	ldr	r0, [r3, #8]
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	fa00 f203 	lsl.w	r2, r0, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b10      	cmp	r3, #16
 8001870:	d003      	beq.n	800187a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001876:	2b11      	cmp	r3, #17
 8001878:	d132      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a1d      	ldr	r2, [pc, #116]	; (80018f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d125      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d126      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80018a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b10      	cmp	r3, #16
 80018a8:	d11a      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a13      	ldr	r2, [pc, #76]	; (80018fc <HAL_ADC_ConfigChannel+0x1ec>)
 80018b0:	fba2 2303 	umull	r2, r3, r2, r3
 80018b4:	0c9a      	lsrs	r2, r3, #18
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c0:	e002      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f9      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x1b2>
 80018ce:	e007      	b.n	80018e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	f043 0220 	orr.w	r2, r3, #32
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40012400 	.word	0x40012400
 80018f8:	20000008 	.word	0x20000008
 80018fc:	431bde83 	.word	0x431bde83

08001900 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b01      	cmp	r3, #1
 800191c:	d040      	beq.n	80019a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0201 	orr.w	r2, r2, #1
 800192c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <ADC_Enable+0xac>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a1f      	ldr	r2, [pc, #124]	; (80019b0 <ADC_Enable+0xb0>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	0c9b      	lsrs	r3, r3, #18
 800193a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800193c:	e002      	b.n	8001944 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	3b01      	subs	r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f9      	bne.n	800193e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800194a:	f7ff fd21 	bl	8001390 <HAL_GetTick>
 800194e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001950:	e01f      	b.n	8001992 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001952:	f7ff fd1d 	bl	8001390 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d918      	bls.n	8001992 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d011      	beq.n	8001992 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e007      	b.n	80019a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0301 	and.w	r3, r3, #1
 800199c:	2b01      	cmp	r3, #1
 800199e:	d1d8      	bne.n	8001952 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d12e      	bne.n	8001a2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019de:	f7ff fcd7 	bl	8001390 <HAL_GetTick>
 80019e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019e4:	e01b      	b.n	8001a1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019e6:	f7ff fcd3 	bl	8001390 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d914      	bls.n	8001a1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d10d      	bne.n	8001a1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	f043 0210 	orr.w	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e007      	b.n	8001a2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d0dc      	beq.n	80019e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a54:	4013      	ands	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6a:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <__NVIC_SetPriorityGrouping+0x44>)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	60d3      	str	r3, [r2, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <__NVIC_GetPriorityGrouping+0x18>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	0a1b      	lsrs	r3, r3, #8
 8001a8a:	f003 0307 	and.w	r3, r3, #7
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0b      	blt.n	8001ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	4906      	ldr	r1, [pc, #24]	; (8001ad0 <__NVIC_EnableIRQ+0x34>)
 8001ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	2001      	movs	r0, #1
 8001abe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100

08001ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	6039      	str	r1, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0a      	blt.n	8001afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	490c      	ldr	r1, [pc, #48]	; (8001b20 <__NVIC_SetPriority+0x4c>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	440b      	add	r3, r1
 8001af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001afc:	e00a      	b.n	8001b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4908      	ldr	r1, [pc, #32]	; (8001b24 <__NVIC_SetPriority+0x50>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	3b04      	subs	r3, #4
 8001b0c:	0112      	lsls	r2, r2, #4
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	440b      	add	r3, r1
 8001b12:	761a      	strb	r2, [r3, #24]
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	; 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 0307 	and.w	r3, r3, #7
 8001b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f1c3 0307 	rsb	r3, r3, #7
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	bf28      	it	cs
 8001b46:	2304      	movcs	r3, #4
 8001b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	3304      	adds	r3, #4
 8001b4e:	2b06      	cmp	r3, #6
 8001b50:	d902      	bls.n	8001b58 <NVIC_EncodePriority+0x30>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3b03      	subs	r3, #3
 8001b56:	e000      	b.n	8001b5a <NVIC_EncodePriority+0x32>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43da      	mvns	r2, r3
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	401a      	ands	r2, r3
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b70:	f04f 31ff 	mov.w	r1, #4294967295
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7a:	43d9      	mvns	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b80:	4313      	orrs	r3, r2
         );
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3724      	adds	r7, #36	; 0x24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff90 	bl	8001ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff2d 	bl	8001a38 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff42 	bl	8001a80 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff90 	bl	8001b28 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5f 	bl	8001ad4 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff35 	bl	8001a9c <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b08b      	sub	sp, #44	; 0x2c
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c66:	e169      	b.n	8001f3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	69fa      	ldr	r2, [r7, #28]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f040 8158 	bne.w	8001f36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a9a      	ldr	r2, [pc, #616]	; (8001ef4 <HAL_GPIO_Init+0x2a0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d05e      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001c90:	4a98      	ldr	r2, [pc, #608]	; (8001ef4 <HAL_GPIO_Init+0x2a0>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d875      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001c96:	4a98      	ldr	r2, [pc, #608]	; (8001ef8 <HAL_GPIO_Init+0x2a4>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d058      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001c9c:	4a96      	ldr	r2, [pc, #600]	; (8001ef8 <HAL_GPIO_Init+0x2a4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d86f      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001ca2:	4a96      	ldr	r2, [pc, #600]	; (8001efc <HAL_GPIO_Init+0x2a8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d052      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001ca8:	4a94      	ldr	r2, [pc, #592]	; (8001efc <HAL_GPIO_Init+0x2a8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d869      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cae:	4a94      	ldr	r2, [pc, #592]	; (8001f00 <HAL_GPIO_Init+0x2ac>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d04c      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001cb4:	4a92      	ldr	r2, [pc, #584]	; (8001f00 <HAL_GPIO_Init+0x2ac>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d863      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cba:	4a92      	ldr	r2, [pc, #584]	; (8001f04 <HAL_GPIO_Init+0x2b0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d046      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
 8001cc0:	4a90      	ldr	r2, [pc, #576]	; (8001f04 <HAL_GPIO_Init+0x2b0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d85d      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d82a      	bhi.n	8001d20 <HAL_GPIO_Init+0xcc>
 8001cca:	2b12      	cmp	r3, #18
 8001ccc:	d859      	bhi.n	8001d82 <HAL_GPIO_Init+0x12e>
 8001cce:	a201      	add	r2, pc, #4	; (adr r2, 8001cd4 <HAL_GPIO_Init+0x80>)
 8001cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd4:	08001d4f 	.word	0x08001d4f
 8001cd8:	08001d29 	.word	0x08001d29
 8001cdc:	08001d3b 	.word	0x08001d3b
 8001ce0:	08001d7d 	.word	0x08001d7d
 8001ce4:	08001d83 	.word	0x08001d83
 8001ce8:	08001d83 	.word	0x08001d83
 8001cec:	08001d83 	.word	0x08001d83
 8001cf0:	08001d83 	.word	0x08001d83
 8001cf4:	08001d83 	.word	0x08001d83
 8001cf8:	08001d83 	.word	0x08001d83
 8001cfc:	08001d83 	.word	0x08001d83
 8001d00:	08001d83 	.word	0x08001d83
 8001d04:	08001d83 	.word	0x08001d83
 8001d08:	08001d83 	.word	0x08001d83
 8001d0c:	08001d83 	.word	0x08001d83
 8001d10:	08001d83 	.word	0x08001d83
 8001d14:	08001d83 	.word	0x08001d83
 8001d18:	08001d31 	.word	0x08001d31
 8001d1c:	08001d45 	.word	0x08001d45
 8001d20:	4a79      	ldr	r2, [pc, #484]	; (8001f08 <HAL_GPIO_Init+0x2b4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d26:	e02c      	b.n	8001d82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e029      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	3304      	adds	r3, #4
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e024      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	3308      	adds	r3, #8
 8001d40:	623b      	str	r3, [r7, #32]
          break;
 8001d42:	e01f      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	330c      	adds	r3, #12
 8001d4a:	623b      	str	r3, [r7, #32]
          break;
 8001d4c:	e01a      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d56:	2304      	movs	r3, #4
 8001d58:	623b      	str	r3, [r7, #32]
          break;
 8001d5a:	e013      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d64:	2308      	movs	r3, #8
 8001d66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	611a      	str	r2, [r3, #16]
          break;
 8001d6e:	e009      	b.n	8001d84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d70:	2308      	movs	r3, #8
 8001d72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69fa      	ldr	r2, [r7, #28]
 8001d78:	615a      	str	r2, [r3, #20]
          break;
 8001d7a:	e003      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
          break;
 8001d80:	e000      	b.n	8001d84 <HAL_GPIO_Init+0x130>
          break;
 8001d82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2bff      	cmp	r3, #255	; 0xff
 8001d88:	d801      	bhi.n	8001d8e <HAL_GPIO_Init+0x13a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	e001      	b.n	8001d92 <HAL_GPIO_Init+0x13e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3304      	adds	r3, #4
 8001d92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2bff      	cmp	r3, #255	; 0xff
 8001d98:	d802      	bhi.n	8001da0 <HAL_GPIO_Init+0x14c>
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	e002      	b.n	8001da6 <HAL_GPIO_Init+0x152>
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	3b08      	subs	r3, #8
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	210f      	movs	r1, #15
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	401a      	ands	r2, r3
 8001db8:	6a39      	ldr	r1, [r7, #32]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80b1 	beq.w	8001f36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	; (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	; (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b4a      	ldr	r3, [pc, #296]	; (8001f0c <HAL_GPIO_Init+0x2b8>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dec:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_GPIO_Init+0x2bc>)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a40      	ldr	r2, [pc, #256]	; (8001f14 <HAL_GPIO_Init+0x2c0>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_GPIO_Init+0x1ec>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3f      	ldr	r2, [pc, #252]	; (8001f18 <HAL_GPIO_Init+0x2c4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_Init+0x1e8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a3e      	ldr	r2, [pc, #248]	; (8001f1c <HAL_GPIO_Init+0x2c8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_Init+0x1e4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a3d      	ldr	r2, [pc, #244]	; (8001f20 <HAL_GPIO_Init+0x2cc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_Init+0x1e0>
 8001e30:	2303      	movs	r3, #3
 8001e32:	e006      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e34:	2304      	movs	r3, #4
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_Init+0x1ee>
 8001e40:	2300      	movs	r3, #0
 8001e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e52:	492f      	ldr	r1, [pc, #188]	; (8001f10 <HAL_GPIO_Init+0x2bc>)
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d006      	beq.n	8001e7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	492c      	ldr	r1, [pc, #176]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	e006      	b.n	8001e88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e7a:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	4928      	ldr	r1, [pc, #160]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4922      	ldr	r1, [pc, #136]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	491e      	ldr	r1, [pc, #120]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	4918      	ldr	r1, [pc, #96]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	608b      	str	r3, [r1, #8]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	4914      	ldr	r1, [pc, #80]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d021      	beq.n	8001f28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	490e      	ldr	r1, [pc, #56]	; (8001f24 <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	60cb      	str	r3, [r1, #12]
 8001ef0:	e021      	b.n	8001f36 <HAL_GPIO_Init+0x2e2>
 8001ef2:	bf00      	nop
 8001ef4:	10320000 	.word	0x10320000
 8001ef8:	10310000 	.word	0x10310000
 8001efc:	10220000 	.word	0x10220000
 8001f00:	10210000 	.word	0x10210000
 8001f04:	10120000 	.word	0x10120000
 8001f08:	10110000 	.word	0x10110000
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40010c00 	.word	0x40010c00
 8001f1c:	40011000 	.word	0x40011000
 8001f20:	40011400 	.word	0x40011400
 8001f24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	4909      	ldr	r1, [pc, #36]	; (8001f58 <HAL_GPIO_Init+0x304>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	3301      	adds	r3, #1
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f47f ae8e 	bne.w	8001c68 <HAL_GPIO_Init+0x14>
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	bf00      	nop
 8001f50:	372c      	adds	r7, #44	; 0x2c
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f78:	e003      	b.n	8001f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	041a      	lsls	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	460b      	mov	r3, r1
 8001f96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43d9      	mvns	r1, r3
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	400b      	ands	r3, r1
 8001fae:	431a      	orrs	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	611a      	str	r2, [r3, #16]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bc80      	pop	{r7}
 8001fbc:	4770      	bx	lr
	...

08001fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d006      	beq.n	8001fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fd6:	4a05      	ldr	r2, [pc, #20]	; (8001fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fc6c 	bl	80008bc <HAL_GPIO_EXTI_Callback>
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40010400 	.word	0x40010400

08001ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e12b      	b.n	800225a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe ff64 	bl	8000ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2224      	movs	r2, #36	; 0x24
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 0201 	bic.w	r2, r2, #1
 8002032:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002042:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002052:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002054:	f000 ffea 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8002058:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a81      	ldr	r2, [pc, #516]	; (8002264 <HAL_I2C_Init+0x274>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d807      	bhi.n	8002074 <HAL_I2C_Init+0x84>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_I2C_Init+0x278>)
 8002068:	4293      	cmp	r3, r2
 800206a:	bf94      	ite	ls
 800206c:	2301      	movls	r3, #1
 800206e:	2300      	movhi	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e006      	b.n	8002082 <HAL_I2C_Init+0x92>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a7d      	ldr	r2, [pc, #500]	; (800226c <HAL_I2C_Init+0x27c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	bf94      	ite	ls
 800207c:	2301      	movls	r3, #1
 800207e:	2300      	movhi	r3, #0
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0e7      	b.n	800225a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4a78      	ldr	r2, [pc, #480]	; (8002270 <HAL_I2C_Init+0x280>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9b      	lsrs	r3, r3, #18
 8002094:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a6a      	ldr	r2, [pc, #424]	; (8002264 <HAL_I2C_Init+0x274>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d802      	bhi.n	80020c4 <HAL_I2C_Init+0xd4>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	3301      	adds	r3, #1
 80020c2:	e009      	b.n	80020d8 <HAL_I2C_Init+0xe8>
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	4a69      	ldr	r2, [pc, #420]	; (8002274 <HAL_I2C_Init+0x284>)
 80020d0:	fba2 2303 	umull	r2, r3, r2, r3
 80020d4:	099b      	lsrs	r3, r3, #6
 80020d6:	3301      	adds	r3, #1
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	430b      	orrs	r3, r1
 80020de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	495c      	ldr	r1, [pc, #368]	; (8002264 <HAL_I2C_Init+0x274>)
 80020f4:	428b      	cmp	r3, r1
 80020f6:	d819      	bhi.n	800212c <HAL_I2C_Init+0x13c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	1e59      	subs	r1, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	fbb1 f3f3 	udiv	r3, r1, r3
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	f640 73fc 	movw	r3, #4092	; 0xffc
 800210c:	400b      	ands	r3, r1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_I2C_Init+0x138>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1e59      	subs	r1, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002120:	3301      	adds	r3, #1
 8002122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002126:	e051      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 8002128:	2304      	movs	r3, #4
 800212a:	e04f      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d111      	bne.n	8002158 <HAL_I2C_Init+0x168>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e58      	subs	r0, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	440b      	add	r3, r1
 8002142:	fbb0 f3f3 	udiv	r3, r0, r3
 8002146:	3301      	adds	r3, #1
 8002148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf0c      	ite	eq
 8002150:	2301      	moveq	r3, #1
 8002152:	2300      	movne	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	e012      	b.n	800217e <HAL_I2C_Init+0x18e>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1e58      	subs	r0, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6859      	ldr	r1, [r3, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	0099      	lsls	r1, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	3301      	adds	r3, #1
 8002170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002174:	2b00      	cmp	r3, #0
 8002176:	bf0c      	ite	eq
 8002178:	2301      	moveq	r3, #1
 800217a:	2300      	movne	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Init+0x196>
 8002182:	2301      	movs	r3, #1
 8002184:	e022      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10e      	bne.n	80021ac <HAL_I2C_Init+0x1bc>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	1e58      	subs	r0, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	460b      	mov	r3, r1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	440b      	add	r3, r1
 800219c:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a0:	3301      	adds	r3, #1
 80021a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021aa:	e00f      	b.n	80021cc <HAL_I2C_Init+0x1dc>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	0099      	lsls	r1, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	6809      	ldr	r1, [r1, #0]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69da      	ldr	r2, [r3, #28]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6911      	ldr	r1, [r2, #16]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68d2      	ldr	r2, [r2, #12]
 8002206:	4311      	orrs	r1, r2
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	430b      	orrs	r3, r1
 800220e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2220      	movs	r2, #32
 8002246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	000186a0 	.word	0x000186a0
 8002268:	001e847f 	.word	0x001e847f
 800226c:	003d08ff 	.word	0x003d08ff
 8002270:	431bde83 	.word	0x431bde83
 8002274:	10624dd3 	.word	0x10624dd3

08002278 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af02      	add	r7, sp, #8
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	461a      	mov	r2, r3
 8002284:	460b      	mov	r3, r1
 8002286:	817b      	strh	r3, [r7, #10]
 8002288:	4613      	mov	r3, r2
 800228a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800228c:	f7ff f880 	bl	8001390 <HAL_GetTick>
 8002290:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b20      	cmp	r3, #32
 800229c:	f040 80e0 	bne.w	8002460 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2319      	movs	r3, #25
 80022a6:	2201      	movs	r2, #1
 80022a8:	4970      	ldr	r1, [pc, #448]	; (800246c <HAL_I2C_Master_Transmit+0x1f4>)
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f964 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
 80022b8:	e0d3      	b.n	8002462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_I2C_Master_Transmit+0x50>
 80022c4:	2302      	movs	r3, #2
 80022c6:	e0cc      	b.n	8002462 <HAL_I2C_Master_Transmit+0x1ea>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d007      	beq.n	80022ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2221      	movs	r2, #33	; 0x21
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2210      	movs	r2, #16
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	893a      	ldrh	r2, [r7, #8]
 800231e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29a      	uxth	r2, r3
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a50      	ldr	r2, [pc, #320]	; (8002470 <HAL_I2C_Master_Transmit+0x1f8>)
 800232e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002330:	8979      	ldrh	r1, [r7, #10]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	6a3a      	ldr	r2, [r7, #32]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 f89c 	bl	8002474 <I2C_MasterRequestWrite>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e08d      	b.n	8002462 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800235c:	e066      	b.n	800242c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	6a39      	ldr	r1, [r7, #32]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f9de 	bl	8002724 <I2C_WaitOnTXEFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00d      	beq.n	800238a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	2b04      	cmp	r3, #4
 8002374:	d107      	bne.n	8002386 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002384:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06b      	b.n	8002462 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d11b      	bne.n	8002400 <HAL_I2C_Master_Transmit+0x188>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d017      	beq.n	8002400 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b29a      	uxth	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	6a39      	ldr	r1, [r7, #32]
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f9ce 	bl	80027a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00d      	beq.n	800242c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	2b04      	cmp	r3, #4
 8002416:	d107      	bne.n	8002428 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002426:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e01a      	b.n	8002462 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	2b00      	cmp	r3, #0
 8002432:	d194      	bne.n	800235e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	00100002 	.word	0x00100002
 8002470:	ffff0000 	.word	0xffff0000

08002474 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af02      	add	r7, sp, #8
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	460b      	mov	r3, r1
 8002482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b08      	cmp	r3, #8
 800248e:	d006      	beq.n	800249e <I2C_MasterRequestWrite+0x2a>
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d003      	beq.n	800249e <I2C_MasterRequestWrite+0x2a>
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800249c:	d108      	bne.n	80024b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	e00b      	b.n	80024c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	2b12      	cmp	r3, #18
 80024b6:	d107      	bne.n	80024c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f84f 	bl	8002578 <I2C_WaitOnFlagUntilTimeout>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00d      	beq.n	80024fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ee:	d103      	bne.n	80024f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e035      	b.n	8002568 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002504:	d108      	bne.n	8002518 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	e01b      	b.n	8002550 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002518:	897b      	ldrh	r3, [r7, #10]
 800251a:	11db      	asrs	r3, r3, #7
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f003 0306 	and.w	r3, r3, #6
 8002522:	b2db      	uxtb	r3, r3
 8002524:	f063 030f 	orn	r3, r3, #15
 8002528:	b2da      	uxtb	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	490e      	ldr	r1, [pc, #56]	; (8002570 <I2C_MasterRequestWrite+0xfc>)
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f875 	bl	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e010      	b.n	8002568 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002546:	897b      	ldrh	r3, [r7, #10]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <I2C_MasterRequestWrite+0x100>)
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 f865 	bl	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	00010008 	.word	0x00010008
 8002574:	00010002 	.word	0x00010002

08002578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	603b      	str	r3, [r7, #0]
 8002584:	4613      	mov	r3, r2
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002588:	e025      	b.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002590:	d021      	beq.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002592:	f7fe fefd 	bl	8001390 <HAL_GetTick>
 8002596:	4602      	mov	r2, r0
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d302      	bcc.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d116      	bne.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f043 0220 	orr.w	r2, r3, #32
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e023      	b.n	800261e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	0c1b      	lsrs	r3, r3, #16
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10d      	bne.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	43da      	mvns	r2, r3
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4013      	ands	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	461a      	mov	r2, r3
 80025fa:	e00c      	b.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	43da      	mvns	r2, r3
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4013      	ands	r3, r2
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	429a      	cmp	r2, r3
 800261a:	d0b6      	beq.n	800258a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002634:	e051      	b.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002644:	d123      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002654:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800265e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2220      	movs	r2, #32
 800266a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	f043 0204 	orr.w	r2, r3, #4
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e046      	b.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002694:	d021      	beq.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002696:	f7fe fe7b 	bl	8001390 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d302      	bcc.n	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d116      	bne.n	80026da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2220      	movs	r2, #32
 80026b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e020      	b.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	0c1b      	lsrs	r3, r3, #16
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10c      	bne.n	80026fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	43da      	mvns	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	e00b      	b.n	8002716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	43da      	mvns	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d18d      	bne.n	8002636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002730:	e02d      	b.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 f878 	bl	8002828 <I2C_IsAcknowledgeFailed>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e02d      	b.n	800279e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002748:	d021      	beq.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274a:	f7fe fe21 	bl	8001390 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	429a      	cmp	r2, r3
 8002758:	d302      	bcc.n	8002760 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d116      	bne.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f043 0220 	orr.w	r2, r3, #32
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e007      	b.n	800279e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002798:	2b80      	cmp	r3, #128	; 0x80
 800279a:	d1ca      	bne.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	60f8      	str	r0, [r7, #12]
 80027ae:	60b9      	str	r1, [r7, #8]
 80027b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b2:	e02d      	b.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f837 	bl	8002828 <I2C_IsAcknowledgeFailed>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e02d      	b.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d021      	beq.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027cc:	f7fe fde0 	bl	8001390 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d302      	bcc.n	80027e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d116      	bne.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2220      	movs	r2, #32
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	f043 0220 	orr.w	r2, r3, #32
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e007      	b.n	8002820 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b04      	cmp	r3, #4
 800281c:	d1ca      	bne.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800283e:	d11b      	bne.n	8002878 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002848:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f043 0204 	orr.w	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e272      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8087 	beq.w	80029b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a4:	4b92      	ldr	r3, [pc, #584]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d00c      	beq.n	80028ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028b0:	4b8f      	ldr	r3, [pc, #572]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b08      	cmp	r3, #8
 80028ba:	d112      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5e>
 80028bc:	4b8c      	ldr	r3, [pc, #560]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c8:	d10b      	bne.n	80028e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ca:	4b89      	ldr	r3, [pc, #548]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d06c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x12c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d168      	bne.n	80029b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e24c      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ea:	d106      	bne.n	80028fa <HAL_RCC_OscConfig+0x76>
 80028ec:	4b80      	ldr	r3, [pc, #512]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a7f      	ldr	r2, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80028f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028f6:	6013      	str	r3, [r2, #0]
 80028f8:	e02e      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10c      	bne.n	800291c <HAL_RCC_OscConfig+0x98>
 8002902:	4b7b      	ldr	r3, [pc, #492]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a7a      	ldr	r2, [pc, #488]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	4b78      	ldr	r3, [pc, #480]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a77      	ldr	r2, [pc, #476]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0xbc>
 8002926:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a71      	ldr	r2, [pc, #452]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800292c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b6f      	ldr	r3, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a6e      	ldr	r2, [pc, #440]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e00b      	b.n	8002958 <HAL_RCC_OscConfig+0xd4>
 8002940:	4b6b      	ldr	r3, [pc, #428]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a6a      	ldr	r2, [pc, #424]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	4b68      	ldr	r3, [pc, #416]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a67      	ldr	r2, [pc, #412]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002956:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d013      	beq.n	8002988 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fe fd16 	bl	8001390 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7fe fd12 	bl	8001390 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e200      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b5d      	ldr	r3, [pc, #372]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0xe4>
 8002986:	e014      	b.n	80029b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fd02 	bl	8001390 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7fe fcfe 	bl	8001390 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e1ec      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029a2:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x10c>
 80029ae:	e000      	b.n	80029b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d063      	beq.n	8002a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029be:	4b4c      	ldr	r3, [pc, #304]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d00b      	beq.n	80029e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029ca:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b08      	cmp	r3, #8
 80029d4:	d11c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x18c>
 80029d6:	4b46      	ldr	r3, [pc, #280]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d116      	bne.n	8002a10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e2:	4b43      	ldr	r3, [pc, #268]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x176>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d001      	beq.n	80029fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e1c0      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b3d      	ldr	r3, [pc, #244]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4939      	ldr	r1, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0e:	e03a      	b.n	8002a86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fcb7 	bl	8001390 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a26:	f7fe fcb3 	bl	8001390 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e1a1      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a44:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4927      	ldr	r1, [pc, #156]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
 8002a58:	e015      	b.n	8002a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5a:	4b26      	ldr	r3, [pc, #152]	; (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe fc96 	bl	8001390 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a68:	f7fe fc92 	bl	8001390 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e180      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0308 	and.w	r3, r3, #8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d03a      	beq.n	8002b08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d019      	beq.n	8002ace <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fc76 	bl	8001390 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa8:	f7fe fc72 	bl	8001390 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e160      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f0      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f000 fad8 	bl	800307c <RCC_Delay>
 8002acc:	e01c      	b.n	8002b08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fc5c 	bl	8001390 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ada:	e00f      	b.n	8002afc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002adc:	f7fe fc58 	bl	8001390 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d908      	bls.n	8002afc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e146      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	42420000 	.word	0x42420000
 8002af8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002afc:	4b92      	ldr	r3, [pc, #584]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e9      	bne.n	8002adc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80a6 	beq.w	8002c62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b1a:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10d      	bne.n	8002b42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	4a87      	ldr	r2, [pc, #540]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	61d3      	str	r3, [r2, #28]
 8002b32:	4b85      	ldr	r3, [pc, #532]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60bb      	str	r3, [r7, #8]
 8002b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b42:	4b82      	ldr	r3, [pc, #520]	; (8002d4c <HAL_RCC_OscConfig+0x4c8>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d118      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	; (8002d4c <HAL_RCC_OscConfig+0x4c8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a7e      	ldr	r2, [pc, #504]	; (8002d4c <HAL_RCC_OscConfig+0x4c8>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe fc19 	bl	8001390 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b62:	f7fe fc15 	bl	8001390 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b64      	cmp	r3, #100	; 0x64
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e103      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b74:	4b75      	ldr	r3, [pc, #468]	; (8002d4c <HAL_RCC_OscConfig+0x4c8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d106      	bne.n	8002b96 <HAL_RCC_OscConfig+0x312>
 8002b88:	4b6f      	ldr	r3, [pc, #444]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6213      	str	r3, [r2, #32]
 8002b94:	e02d      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x334>
 8002b9e:	4b6a      	ldr	r3, [pc, #424]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a69      	ldr	r2, [pc, #420]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6213      	str	r3, [r2, #32]
 8002baa:	4b67      	ldr	r3, [pc, #412]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a66      	ldr	r2, [pc, #408]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	e01c      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCC_OscConfig+0x356>
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	4a60      	ldr	r2, [pc, #384]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bc6:	f043 0304 	orr.w	r3, r3, #4
 8002bca:	6213      	str	r3, [r2, #32]
 8002bcc:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a5d      	ldr	r2, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bd2:	f043 0301 	orr.w	r3, r3, #1
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	e00b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x36e>
 8002bda:	4b5b      	ldr	r3, [pc, #364]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	4a5a      	ldr	r2, [pc, #360]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002be0:	f023 0301 	bic.w	r3, r3, #1
 8002be4:	6213      	str	r3, [r2, #32]
 8002be6:	4b58      	ldr	r3, [pc, #352]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a57      	ldr	r2, [pc, #348]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d015      	beq.n	8002c26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fbc9 	bl	8001390 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c00:	e00a      	b.n	8002c18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c02:	f7fe fbc5 	bl	8001390 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e0b1      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c18:	4b4b      	ldr	r3, [pc, #300]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d0ee      	beq.n	8002c02 <HAL_RCC_OscConfig+0x37e>
 8002c24:	e014      	b.n	8002c50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c26:	f7fe fbb3 	bl	8001390 <HAL_GetTick>
 8002c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	e00a      	b.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe fbaf 	bl	8001390 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e09b      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c44:	4b40      	ldr	r3, [pc, #256]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1ee      	bne.n	8002c2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c50:	7dfb      	ldrb	r3, [r7, #23]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4b3c      	ldr	r3, [pc, #240]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	4a3b      	ldr	r2, [pc, #236]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8087 	beq.w	8002d7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c6c:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d061      	beq.n	8002d3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d146      	bne.n	8002d0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c80:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c86:	f7fe fb83 	bl	8001390 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8e:	f7fe fb7f 	bl	8001390 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e06d      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca0:	4b29      	ldr	r3, [pc, #164]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1f0      	bne.n	8002c8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cb4:	d108      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4921      	ldr	r1, [pc, #132]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a19      	ldr	r1, [r3, #32]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	491b      	ldr	r1, [pc, #108]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce0:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fb53 	bl	8001390 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cee:	f7fe fb4f 	bl	8001390 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e03d      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x46a>
 8002d0c:	e035      	b.n	8002d7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	4b10      	ldr	r3, [pc, #64]	; (8002d50 <HAL_RCC_OscConfig+0x4cc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe fb3c 	bl	8001390 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fb38 	bl	8001390 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e026      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x498>
 8002d3a:	e01e      	b.n	8002d7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d107      	bne.n	8002d54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e019      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40007000 	.word	0x40007000
 8002d50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x500>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d001      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3718      	adds	r7, #24
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40021000 	.word	0x40021000

08002d88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0d0      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d910      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b67      	ldr	r3, [pc, #412]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f023 0207 	bic.w	r2, r3, #7
 8002db2:	4965      	ldr	r1, [pc, #404]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0b8      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de4:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002dea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dfc:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	494d      	ldr	r1, [pc, #308]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d040      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d115      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07f      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e073      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3d      	ldr	r3, [pc, #244]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06b      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4936      	ldr	r1, [pc, #216]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7fe fa8a 	bl	8001390 <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7fe fa86 	bl	8001390 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e053      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d210      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0207 	bic.w	r2, r3, #7
 8002ebe:	4922      	ldr	r1, [pc, #136]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e032      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4916      	ldr	r1, [pc, #88]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	490e      	ldr	r1, [pc, #56]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f16:	f000 f821 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	490a      	ldr	r1, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x1cc>)
 8002f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_ClockConfig+0x1d0>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe f9e8 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	0800529c 	.word	0x0800529c
 8002f54:	20000008 	.word	0x20000008
 8002f58:	2000000c 	.word	0x2000000c

08002f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	b490      	push	{r4, r7}
 8002f5e:	b08a      	sub	sp, #40	; 0x28
 8002f60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <HAL_RCC_GetSysClockFreq+0xac>)
 8002f64:	1d3c      	adds	r4, r7, #4
 8002f66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002f6c:	f240 2301 	movw	r3, #513	; 0x201
 8002f70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	2300      	movs	r3, #0
 8002f78:	61bb      	str	r3, [r7, #24]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 030c 	and.w	r3, r3, #12
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d002      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x40>
 8002f96:	2b08      	cmp	r3, #8
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x46>
 8002f9a:	e02b      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f9e:	623b      	str	r3, [r7, #32]
      break;
 8002fa0:	e02b      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	0c9b      	lsrs	r3, r3, #18
 8002fa6:	f003 030f 	and.w	r3, r3, #15
 8002faa:	3328      	adds	r3, #40	; 0x28
 8002fac:	443b      	add	r3, r7
 8002fae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002fb2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d012      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fbe:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	0c5b      	lsrs	r3, r3, #17
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	3328      	adds	r3, #40	; 0x28
 8002fca:	443b      	add	r3, r7
 8002fcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002fd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002fd6:	fb03 f202 	mul.w	r2, r3, r2
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe2:	e004      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	623b      	str	r3, [r7, #32]
      break;
 8002ff2:	e002      	b.n	8002ffa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ff6:	623b      	str	r3, [r7, #32]
      break;
 8002ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3728      	adds	r7, #40	; 0x28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc90      	pop	{r4, r7}
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	0800528c 	.word	0x0800528c
 800300c:	40021000 	.word	0x40021000
 8003010:	007a1200 	.word	0x007a1200
 8003014:	003d0900 	.word	0x003d0900

08003018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800301c:	4b02      	ldr	r3, [pc, #8]	; (8003028 <HAL_RCC_GetHCLKFreq+0x10>)
 800301e:	681b      	ldr	r3, [r3, #0]
}
 8003020:	4618      	mov	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr
 8003028:	20000008 	.word	0x20000008

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003030:	f7ff fff2 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 8003034:	4602      	mov	r2, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0a1b      	lsrs	r3, r3, #8
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4903      	ldr	r1, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003042:	5ccb      	ldrb	r3, [r1, r3]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	080052ac 	.word	0x080052ac

08003054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003058:	f7ff ffde 	bl	8003018 <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	0adb      	lsrs	r3, r3, #11
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	080052ac 	.word	0x080052ac

0800307c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003084:	4b0a      	ldr	r3, [pc, #40]	; (80030b0 <RCC_Delay+0x34>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <RCC_Delay+0x38>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0a5b      	lsrs	r3, r3, #9
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003098:	bf00      	nop
  }
  while (Delay --);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e5a      	subs	r2, r3, #1
 800309e:	60fa      	str	r2, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f9      	bne.n	8003098 <RCC_Delay+0x1c>
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bc80      	pop	{r7}
 80030ae:	4770      	bx	lr
 80030b0:	20000008 	.word	0x20000008
 80030b4:	10624dd3 	.word	0x10624dd3

080030b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d07d      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030d8:	4b4f      	ldr	r3, [pc, #316]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030e4:	4b4c      	ldr	r3, [pc, #304]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4a4b      	ldr	r2, [pc, #300]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ee:	61d3      	str	r3, [r2, #28]
 80030f0:	4b49      	ldr	r3, [pc, #292]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	69db      	ldr	r3, [r3, #28]
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003100:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d118      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a42      	ldr	r2, [pc, #264]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003118:	f7fe f93a 	bl	8001390 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	e008      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7fe f936 	bl	8001390 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e06d      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b3a      	ldr	r3, [pc, #232]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003146:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d02e      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	d027      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800315c:	4b2e      	ldr	r3, [pc, #184]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003164:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800316c:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d014      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe f905 	bl	8001390 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe f901 	bl	8001390 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e036      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b1d      	ldr	r3, [pc, #116]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4917      	ldr	r1, [pc, #92]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d105      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031c4:	4b14      	ldr	r3, [pc, #80]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031c6:	69db      	ldr	r3, [r3, #28]
 80031c8:	4a13      	ldr	r2, [pc, #76]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	490b      	ldr	r1, [pc, #44]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d008      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	4904      	ldr	r1, [pc, #16]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003208:	4313      	orrs	r3, r2
 800320a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	42420440 	.word	0x42420440

08003224 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e041      	b.n	80032ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fe88 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	4619      	mov	r1, r3
 8003262:	4610      	mov	r0, r2
 8003264:	f000 fe38 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3708      	adds	r7, #8
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d001      	beq.n	80032dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e03a      	b.n	8003352 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a18      	ldr	r2, [pc, #96]	; (800335c <HAL_TIM_Base_Start_IT+0x98>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00e      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x58>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003306:	d009      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x58>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a14      	ldr	r2, [pc, #80]	; (8003360 <HAL_TIM_Base_Start_IT+0x9c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_TIM_Base_Start_IT+0x58>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a13      	ldr	r2, [pc, #76]	; (8003364 <HAL_TIM_Base_Start_IT+0xa0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d111      	bne.n	8003340 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d010      	beq.n	8003350 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0201 	orr.w	r2, r2, #1
 800333c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	e007      	b.n	8003350 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40000400 	.word	0x40000400
 8003364:	40000800 	.word	0x40000800

08003368 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e041      	b.n	80033fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f839 	bl	8003406 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f000 fd96 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <HAL_TIM_PWM_Start+0x24>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	bf14      	ite	ne
 8003434:	2301      	movne	r3, #1
 8003436:	2300      	moveq	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	e022      	b.n	8003482 <HAL_TIM_PWM_Start+0x6a>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b04      	cmp	r3, #4
 8003440:	d109      	bne.n	8003456 <HAL_TIM_PWM_Start+0x3e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b01      	cmp	r3, #1
 800344c:	bf14      	ite	ne
 800344e:	2301      	movne	r3, #1
 8003450:	2300      	moveq	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	e015      	b.n	8003482 <HAL_TIM_PWM_Start+0x6a>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d109      	bne.n	8003470 <HAL_TIM_PWM_Start+0x58>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	bf14      	ite	ne
 8003468:	2301      	movne	r3, #1
 800346a:	2300      	moveq	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e008      	b.n	8003482 <HAL_TIM_PWM_Start+0x6a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	bf14      	ite	ne
 800347c:	2301      	movne	r3, #1
 800347e:	2300      	moveq	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e05e      	b.n	8003548 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <HAL_TIM_PWM_Start+0x82>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2202      	movs	r2, #2
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003498:	e013      	b.n	80034c2 <HAL_TIM_PWM_Start+0xaa>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b04      	cmp	r3, #4
 800349e:	d104      	bne.n	80034aa <HAL_TIM_PWM_Start+0x92>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2202      	movs	r2, #2
 80034a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a8:	e00b      	b.n	80034c2 <HAL_TIM_PWM_Start+0xaa>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d104      	bne.n	80034ba <HAL_TIM_PWM_Start+0xa2>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034b8:	e003      	b.n	80034c2 <HAL_TIM_PWM_Start+0xaa>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2202      	movs	r2, #2
 80034be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2201      	movs	r2, #1
 80034c8:	6839      	ldr	r1, [r7, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f001 f891 	bl	80045f2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <HAL_TIM_PWM_Start+0x138>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d107      	bne.n	80034ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a18      	ldr	r2, [pc, #96]	; (8003550 <HAL_TIM_PWM_Start+0x138>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_TIM_PWM_Start+0xfa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d009      	beq.n	8003512 <HAL_TIM_PWM_Start+0xfa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a14      	ldr	r2, [pc, #80]	; (8003554 <HAL_TIM_PWM_Start+0x13c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_TIM_PWM_Start+0xfa>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a12      	ldr	r2, [pc, #72]	; (8003558 <HAL_TIM_PWM_Start+0x140>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d111      	bne.n	8003536 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b06      	cmp	r3, #6
 8003522:	d010      	beq.n	8003546 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003534:	e007      	b.n	8003546 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40012c00 	.word	0x40012c00
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800

0800355c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d109      	bne.n	8003580 <HAL_TIM_PWM_Start_IT+0x24>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e022      	b.n	80035c6 <HAL_TIM_PWM_Start_IT+0x6a>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b04      	cmp	r3, #4
 8003584:	d109      	bne.n	800359a <HAL_TIM_PWM_Start_IT+0x3e>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	bf14      	ite	ne
 8003592:	2301      	movne	r3, #1
 8003594:	2300      	moveq	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e015      	b.n	80035c6 <HAL_TIM_PWM_Start_IT+0x6a>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b08      	cmp	r3, #8
 800359e:	d109      	bne.n	80035b4 <HAL_TIM_PWM_Start_IT+0x58>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e008      	b.n	80035c6 <HAL_TIM_PWM_Start_IT+0x6a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0a4      	b.n	8003718 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <HAL_TIM_PWM_Start_IT+0x82>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035dc:	e013      	b.n	8003606 <HAL_TIM_PWM_Start_IT+0xaa>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_PWM_Start_IT+0x92>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	e00b      	b.n	8003606 <HAL_TIM_PWM_Start_IT+0xaa>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_PWM_Start_IT+0xa2>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	e003      	b.n	8003606 <HAL_TIM_PWM_Start_IT+0xaa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b0c      	cmp	r3, #12
 800360a:	d841      	bhi.n	8003690 <HAL_TIM_PWM_Start_IT+0x134>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <HAL_TIM_PWM_Start_IT+0xb8>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003649 	.word	0x08003649
 8003618:	08003691 	.word	0x08003691
 800361c:	08003691 	.word	0x08003691
 8003620:	08003691 	.word	0x08003691
 8003624:	0800365b 	.word	0x0800365b
 8003628:	08003691 	.word	0x08003691
 800362c:	08003691 	.word	0x08003691
 8003630:	08003691 	.word	0x08003691
 8003634:	0800366d 	.word	0x0800366d
 8003638:	08003691 	.word	0x08003691
 800363c:	08003691 	.word	0x08003691
 8003640:	08003691 	.word	0x08003691
 8003644:	0800367f 	.word	0x0800367f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0202 	orr.w	r2, r2, #2
 8003656:	60da      	str	r2, [r3, #12]
      break;
 8003658:	e01b      	b.n	8003692 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0204 	orr.w	r2, r2, #4
 8003668:	60da      	str	r2, [r3, #12]
      break;
 800366a:	e012      	b.n	8003692 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0208 	orr.w	r2, r2, #8
 800367a:	60da      	str	r2, [r3, #12]
      break;
 800367c:	e009      	b.n	8003692 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68da      	ldr	r2, [r3, #12]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0210 	orr.w	r2, r2, #16
 800368c:	60da      	str	r2, [r3, #12]
      break;
 800368e:	e000      	b.n	8003692 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8003690:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2201      	movs	r2, #1
 8003698:	6839      	ldr	r1, [r7, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f000 ffa9 	bl	80045f2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1e      	ldr	r2, [pc, #120]	; (8003720 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d107      	bne.n	80036ba <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00e      	beq.n	80036e2 <HAL_TIM_PWM_Start_IT+0x186>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d009      	beq.n	80036e2 <HAL_TIM_PWM_Start_IT+0x186>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIM_PWM_Start_IT+0x1c8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d004      	beq.n	80036e2 <HAL_TIM_PWM_Start_IT+0x186>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a12      	ldr	r2, [pc, #72]	; (8003728 <HAL_TIM_PWM_Start_IT+0x1cc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d111      	bne.n	8003706 <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b06      	cmp	r3, #6
 80036f2:	d010      	beq.n	8003716 <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003704:	e007      	b.n	8003716 <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40012c00 	.word	0x40012c00
 8003724:	40000400 	.word	0x40000400
 8003728:	40000800 	.word	0x40000800

0800372c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e041      	b.n	80037c2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d106      	bne.n	8003758 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f839 	bl	80037ca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	4610      	mov	r0, r2
 800376c:	f000 fbb4 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037d2:	bf00      	nop
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bc80      	pop	{r7}
 80037da:	4770      	bx	lr

080037dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d122      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d11b      	bne.n	8003838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0202 	mvn.w	r2, #2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd f972 	bl	8000b08 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fb3a 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fb40 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d122      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0204 	mvn.w	r2, #4
 800385c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2202      	movs	r2, #2
 8003862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7fd f948 	bl	8000b08 <HAL_TIM_IC_CaptureCallback>
 8003878:	e005      	b.n	8003886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fb10 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 fb16 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b08      	cmp	r3, #8
 8003898:	d122      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d11b      	bne.n	80038e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f06f 0208 	mvn.w	r2, #8
 80038b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2204      	movs	r2, #4
 80038b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7fd f91e 	bl	8000b08 <HAL_TIM_IC_CaptureCallback>
 80038cc:	e005      	b.n	80038da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fae6 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 faec 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d122      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d11b      	bne.n	8003934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0210 	mvn.w	r2, #16
 8003904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2208      	movs	r2, #8
 800390a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7fd f8f4 	bl	8000b08 <HAL_TIM_IC_CaptureCallback>
 8003920:	e005      	b.n	800392e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 fabc 	bl	8003ea0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 fac2 	bl	8003eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b01      	cmp	r3, #1
 8003940:	d10e      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d107      	bne.n	8003960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0201 	mvn.w	r2, #1
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7fd f810 	bl	8000980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d10e      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d107      	bne.n	800398c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 febf 	bl	800470a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d10e      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a4:	2b40      	cmp	r3, #64	; 0x40
 80039a6:	d107      	bne.n	80039b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fa86 	bl	8003ec4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d10e      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d107      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0220 	mvn.w	r2, #32
 80039dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 fe8a 	bl	80046f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e082      	b.n	8003b0c <HAL_TIM_IC_ConfigChannel+0x120>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11b      	bne.n	8003a4c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	6819      	ldr	r1, [r3, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f000 fc42 	bl	80042ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 020c 	bic.w	r2, r2, #12
 8003a36:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6999      	ldr	r1, [r3, #24]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	619a      	str	r2, [r3, #24]
 8003a4a:	e05a      	b.n	8003b02 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d11c      	bne.n	8003a8c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6819      	ldr	r1, [r3, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f000 fcab 	bl	80043bc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699a      	ldr	r2, [r3, #24]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a74:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6999      	ldr	r1, [r3, #24]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	021a      	lsls	r2, r3, #8
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	619a      	str	r2, [r3, #24]
 8003a8a:	e03a      	b.n	8003b02 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d11b      	bne.n	8003aca <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f000 fcf6 	bl	8004492 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 020c 	bic.w	r2, r2, #12
 8003ab4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69d9      	ldr	r1, [r3, #28]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	689a      	ldr	r2, [r3, #8]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	61da      	str	r2, [r3, #28]
 8003ac8:	e01b      	b.n	8003b02 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f000 fd15 	bl	8004508 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69da      	ldr	r2, [r3, #28]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003aec:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69d9      	ldr	r1, [r3, #28]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	021a      	lsls	r2, r3, #8
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0ac      	b.n	8003c88 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	f200 809f 	bhi.w	8003c7c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003b3e:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b79 	.word	0x08003b79
 8003b48:	08003c7d 	.word	0x08003c7d
 8003b4c:	08003c7d 	.word	0x08003c7d
 8003b50:	08003c7d 	.word	0x08003c7d
 8003b54:	08003bb9 	.word	0x08003bb9
 8003b58:	08003c7d 	.word	0x08003c7d
 8003b5c:	08003c7d 	.word	0x08003c7d
 8003b60:	08003c7d 	.word	0x08003c7d
 8003b64:	08003bfb 	.word	0x08003bfb
 8003b68:	08003c7d 	.word	0x08003c7d
 8003b6c:	08003c7d 	.word	0x08003c7d
 8003b70:	08003c7d 	.word	0x08003c7d
 8003b74:	08003c3b 	.word	0x08003c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa0c 	bl	8003f9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0208 	orr.w	r2, r2, #8
 8003b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0204 	bic.w	r2, r2, #4
 8003ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	619a      	str	r2, [r3, #24]
      break;
 8003bb6:	e062      	b.n	8003c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fa52 	bl	8004068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6999      	ldr	r1, [r3, #24]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	021a      	lsls	r2, r3, #8
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	619a      	str	r2, [r3, #24]
      break;
 8003bf8:	e041      	b.n	8003c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 fa9b 	bl	800413c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0208 	orr.w	r2, r2, #8
 8003c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0204 	bic.w	r2, r2, #4
 8003c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69d9      	ldr	r1, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	61da      	str	r2, [r3, #28]
      break;
 8003c38:	e021      	b.n	8003c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fae5 	bl	8004210 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69d9      	ldr	r1, [r3, #28]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	021a      	lsls	r2, r3, #8
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	61da      	str	r2, [r3, #28]
      break;
 8003c7a:	e000      	b.n	8003c7e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003c7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_ConfigClockSource+0x18>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0b3      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x180>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce0:	d03e      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0xd0>
 8003ce2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ce6:	f200 8087 	bhi.w	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cee:	f000 8085 	beq.w	8003dfc <HAL_TIM_ConfigClockSource+0x16c>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d87f      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003cf8:	2b70      	cmp	r3, #112	; 0x70
 8003cfa:	d01a      	beq.n	8003d32 <HAL_TIM_ConfigClockSource+0xa2>
 8003cfc:	2b70      	cmp	r3, #112	; 0x70
 8003cfe:	d87b      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d00:	2b60      	cmp	r3, #96	; 0x60
 8003d02:	d050      	beq.n	8003da6 <HAL_TIM_ConfigClockSource+0x116>
 8003d04:	2b60      	cmp	r3, #96	; 0x60
 8003d06:	d877      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d08:	2b50      	cmp	r3, #80	; 0x50
 8003d0a:	d03c      	beq.n	8003d86 <HAL_TIM_ConfigClockSource+0xf6>
 8003d0c:	2b50      	cmp	r3, #80	; 0x50
 8003d0e:	d873      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d10:	2b40      	cmp	r3, #64	; 0x40
 8003d12:	d058      	beq.n	8003dc6 <HAL_TIM_ConfigClockSource+0x136>
 8003d14:	2b40      	cmp	r3, #64	; 0x40
 8003d16:	d86f      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d18:	2b30      	cmp	r3, #48	; 0x30
 8003d1a:	d064      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x156>
 8003d1c:	2b30      	cmp	r3, #48	; 0x30
 8003d1e:	d86b      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d060      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x156>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d867      	bhi.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05c      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x156>
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d05a      	beq.n	8003de6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d30:	e062      	b.n	8003df8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6899      	ldr	r1, [r3, #8]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	f000 fc37 	bl	80045b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d54:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	609a      	str	r2, [r3, #8]
      break;
 8003d5e:	e04e      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6899      	ldr	r1, [r3, #8]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f000 fc20 	bl	80045b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d82:	609a      	str	r2, [r3, #8]
      break;
 8003d84:	e03b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6818      	ldr	r0, [r3, #0]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	6859      	ldr	r1, [r3, #4]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	461a      	mov	r2, r3
 8003d94:	f000 fae4 	bl	8004360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2150      	movs	r1, #80	; 0x50
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f000 fbee 	bl	8004580 <TIM_ITRx_SetConfig>
      break;
 8003da4:	e02b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	461a      	mov	r2, r3
 8003db4:	f000 fb3e 	bl	8004434 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2160      	movs	r1, #96	; 0x60
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fbde 	bl	8004580 <TIM_ITRx_SetConfig>
      break;
 8003dc4:	e01b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6818      	ldr	r0, [r3, #0]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f000 fac4 	bl	8004360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2140      	movs	r1, #64	; 0x40
 8003dde:	4618      	mov	r0, r3
 8003de0:	f000 fbce 	bl	8004580 <TIM_ITRx_SetConfig>
      break;
 8003de4:	e00b      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f000 fbc5 	bl	8004580 <TIM_ITRx_SetConfig>
        break;
 8003df6:	e002      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003dfc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d831      	bhi.n	8003e90 <HAL_TIM_ReadCapturedValue+0x78>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e91 	.word	0x08003e91
 8003e3c:	08003e91 	.word	0x08003e91
 8003e40:	08003e91 	.word	0x08003e91
 8003e44:	08003e73 	.word	0x08003e73
 8003e48:	08003e91 	.word	0x08003e91
 8003e4c:	08003e91 	.word	0x08003e91
 8003e50:	08003e91 	.word	0x08003e91
 8003e54:	08003e7d 	.word	0x08003e7d
 8003e58:	08003e91 	.word	0x08003e91
 8003e5c:	08003e91 	.word	0x08003e91
 8003e60:	08003e91 	.word	0x08003e91
 8003e64:	08003e87 	.word	0x08003e87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6e:	60fb      	str	r3, [r7, #12]

      break;
 8003e70:	e00f      	b.n	8003e92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	60fb      	str	r3, [r7, #12]

      break;
 8003e7a:	e00a      	b.n	8003e92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	60fb      	str	r3, [r7, #12]

      break;
 8003e84:	e005      	b.n	8003e92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	60fb      	str	r3, [r7, #12]

      break;
 8003e8e:	e000      	b.n	8003e92 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e90:	bf00      	nop
  }

  return tmpreg;
 8003e92:	68fb      	ldr	r3, [r7, #12]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop

08003ea0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr
	...

08003ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a29      	ldr	r2, [pc, #164]	; (8003f90 <TIM_Base_SetConfig+0xb8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <TIM_Base_SetConfig+0x30>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d007      	beq.n	8003f08 <TIM_Base_SetConfig+0x30>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <TIM_Base_SetConfig+0xbc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <TIM_Base_SetConfig+0x30>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <TIM_Base_SetConfig+0xc0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d108      	bne.n	8003f1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1c      	ldr	r2, [pc, #112]	; (8003f90 <TIM_Base_SetConfig+0xb8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_Base_SetConfig+0x62>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f28:	d007      	beq.n	8003f3a <TIM_Base_SetConfig+0x62>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <TIM_Base_SetConfig+0xbc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_Base_SetConfig+0x62>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a18      	ldr	r2, [pc, #96]	; (8003f98 <TIM_Base_SetConfig+0xc0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <TIM_Base_SetConfig+0xb8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d103      	bne.n	8003f80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	615a      	str	r2, [r3, #20]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40000400 	.word	0x40000400
 8003f98:	40000800 	.word	0x40000800

08003f9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f023 0201 	bic.w	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0303 	bic.w	r3, r3, #3
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f023 0302 	bic.w	r3, r3, #2
 8003fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <TIM_OC1_SetConfig+0xc8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10c      	bne.n	8004012 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f023 0308 	bic.w	r3, r3, #8
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	4313      	orrs	r3, r2
 8004008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f023 0304 	bic.w	r3, r3, #4
 8004010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a13      	ldr	r2, [pc, #76]	; (8004064 <TIM_OC1_SetConfig+0xc8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d111      	bne.n	800403e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	621a      	str	r2, [r3, #32]
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	bc80      	pop	{r7}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40012c00 	.word	0x40012c00

08004068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f023 0210 	bic.w	r2, r3, #16
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f023 0320 	bic.w	r3, r3, #32
 80040b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a1d      	ldr	r2, [pc, #116]	; (8004138 <TIM_OC2_SetConfig+0xd0>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d10d      	bne.n	80040e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a14      	ldr	r2, [pc, #80]	; (8004138 <TIM_OC2_SetConfig+0xd0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d113      	bne.n	8004114 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	40012c00 	.word	0x40012c00

0800413c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0303 	bic.w	r3, r3, #3
 8004172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1d      	ldr	r2, [pc, #116]	; (800420c <TIM_OC3_SetConfig+0xd0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d10d      	bne.n	80041b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	021b      	lsls	r3, r3, #8
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <TIM_OC3_SetConfig+0xd0>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d113      	bne.n	80041e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	621a      	str	r2, [r3, #32]
}
 8004200:	bf00      	nop
 8004202:	371c      	adds	r7, #28
 8004204:	46bd      	mov	sp, r7
 8004206:	bc80      	pop	{r7}
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40012c00 	.word	0x40012c00

08004210 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69db      	ldr	r3, [r3, #28]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	021b      	lsls	r3, r3, #8
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800425a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	031b      	lsls	r3, r3, #12
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a0f      	ldr	r2, [pc, #60]	; (80042a8 <TIM_OC4_SetConfig+0x98>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d109      	bne.n	8004284 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	019b      	lsls	r3, r3, #6
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4313      	orrs	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	621a      	str	r2, [r3, #32]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	40012c00 	.word	0x40012c00

080042ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
 80042b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <TIM_TI1_SetConfig+0xa8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00b      	beq.n	80042f2 <TIM_TI1_SetConfig+0x46>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e0:	d007      	beq.n	80042f2 <TIM_TI1_SetConfig+0x46>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a1c      	ldr	r2, [pc, #112]	; (8004358 <TIM_TI1_SetConfig+0xac>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_TI1_SetConfig+0x46>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a1b      	ldr	r2, [pc, #108]	; (800435c <TIM_TI1_SetConfig+0xb0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d101      	bne.n	80042f6 <TIM_TI1_SetConfig+0x4a>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <TIM_TI1_SetConfig+0x4c>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e003      	b.n	8004316 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	b2db      	uxtb	r3, r3
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f023 030a 	bic.w	r3, r3, #10
 8004330:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 030a 	and.w	r3, r3, #10
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr
 8004354:	40012c00 	.word	0x40012c00
 8004358:	40000400 	.word	0x40000400
 800435c:	40000800 	.word	0x40000800

08004360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004360:	b480      	push	{r7}
 8004362:	b087      	sub	sp, #28
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	f023 0201 	bic.w	r2, r3, #1
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800438a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	4313      	orrs	r3, r2
 8004394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f023 030a 	bic.w	r3, r3, #10
 800439c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr

080043bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043bc:	b480      	push	{r7}
 80043be:	b087      	sub	sp, #28
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f023 0210 	bic.w	r2, r3, #16
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a1b      	ldr	r3, [r3, #32]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	031b      	lsls	r3, r3, #12
 8004400:	b29b      	uxth	r3, r3
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800440e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	bc80      	pop	{r7}
 8004432:	4770      	bx	lr

08004434 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	f023 0210 	bic.w	r2, r3, #16
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800445e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	031b      	lsls	r3, r3, #12
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004470:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	621a      	str	r2, [r3, #32]
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr

08004492 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004492:	b480      	push	{r7}
 8004494:	b087      	sub	sp, #28
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	621a      	str	r2, [r3, #32]
}
 80044fe:	bf00      	nop
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	4313      	orrs	r3, r2
 800453e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004546:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	031b      	lsls	r3, r3, #12
 800454c:	b29b      	uxth	r3, r3
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800455a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr

08004580 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	f043 0307 	orr.w	r3, r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	bf00      	nop
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr

080045b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	021a      	lsls	r2, r3, #8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	609a      	str	r2, [r3, #8]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b087      	sub	sp, #28
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	2201      	movs	r2, #1
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	43db      	mvns	r3, r3
 8004614:	401a      	ands	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	fa01 f303 	lsl.w	r3, r1, r3
 800462a:	431a      	orrs	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	621a      	str	r2, [r3, #32]
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr
	...

0800463c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004650:	2302      	movs	r3, #2
 8004652:	e046      	b.n	80046e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a16      	ldr	r2, [pc, #88]	; (80046ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a0:	d009      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a12      	ldr	r2, [pc, #72]	; (80046f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d004      	beq.n	80046b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a10      	ldr	r2, [pc, #64]	; (80046f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10c      	bne.n	80046d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40000400 	.word	0x40000400
 80046f4:	40000800 	.word	0x40000800

080046f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr

0800470a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	bc80      	pop	{r7}
 800471a:	4770      	bx	lr

0800471c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e03f      	b.n	80047ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d106      	bne.n	8004748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7fc fcb4 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2224      	movs	r2, #36	; 0x24
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800475e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f829 	bl	80047b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695a      	ldr	r2, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68da      	ldr	r2, [r3, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68da      	ldr	r2, [r3, #12]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047f2:	f023 030c 	bic.w	r3, r3, #12
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	68b9      	ldr	r1, [r7, #8]
 80047fc:	430b      	orrs	r3, r1
 80047fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <UART_SetConfig+0x114>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d103      	bne.n	8004828 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004820:	f7fe fc18 	bl	8003054 <HAL_RCC_GetPCLK2Freq>
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	e002      	b.n	800482e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004828:	f7fe fc00 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 800482c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009a      	lsls	r2, r3, #2
 8004838:	441a      	add	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	4a22      	ldr	r2, [pc, #136]	; (80048d0 <UART_SetConfig+0x118>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	0119      	lsls	r1, r3, #4
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009a      	lsls	r2, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	fbb2 f2f3 	udiv	r2, r2, r3
 8004864:	4b1a      	ldr	r3, [pc, #104]	; (80048d0 <UART_SetConfig+0x118>)
 8004866:	fba3 0302 	umull	r0, r3, r3, r2
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2064      	movs	r0, #100	; 0x64
 800486e:	fb00 f303 	mul.w	r3, r0, r3
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	011b      	lsls	r3, r3, #4
 8004876:	3332      	adds	r3, #50	; 0x32
 8004878:	4a15      	ldr	r2, [pc, #84]	; (80048d0 <UART_SetConfig+0x118>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004884:	4419      	add	r1, r3
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	009a      	lsls	r2, r3, #2
 8004890:	441a      	add	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	fbb2 f2f3 	udiv	r2, r2, r3
 800489c:	4b0c      	ldr	r3, [pc, #48]	; (80048d0 <UART_SetConfig+0x118>)
 800489e:	fba3 0302 	umull	r0, r3, r3, r2
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2064      	movs	r0, #100	; 0x64
 80048a6:	fb00 f303 	mul.w	r3, r0, r3
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	3332      	adds	r3, #50	; 0x32
 80048b0:	4a07      	ldr	r2, [pc, #28]	; (80048d0 <UART_SetConfig+0x118>)
 80048b2:	fba2 2303 	umull	r2, r3, r2, r3
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	f003 020f 	and.w	r2, r3, #15
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	440a      	add	r2, r1
 80048c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80048c4:	bf00      	nop
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40013800 	.word	0x40013800
 80048d0:	51eb851f 	.word	0x51eb851f

080048d4 <__errno>:
 80048d4:	4b01      	ldr	r3, [pc, #4]	; (80048dc <__errno+0x8>)
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20000014 	.word	0x20000014

080048e0 <__libc_init_array>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	2600      	movs	r6, #0
 80048e4:	4d0c      	ldr	r5, [pc, #48]	; (8004918 <__libc_init_array+0x38>)
 80048e6:	4c0d      	ldr	r4, [pc, #52]	; (800491c <__libc_init_array+0x3c>)
 80048e8:	1b64      	subs	r4, r4, r5
 80048ea:	10a4      	asrs	r4, r4, #2
 80048ec:	42a6      	cmp	r6, r4
 80048ee:	d109      	bne.n	8004904 <__libc_init_array+0x24>
 80048f0:	f000 fc9c 	bl	800522c <_init>
 80048f4:	2600      	movs	r6, #0
 80048f6:	4d0a      	ldr	r5, [pc, #40]	; (8004920 <__libc_init_array+0x40>)
 80048f8:	4c0a      	ldr	r4, [pc, #40]	; (8004924 <__libc_init_array+0x44>)
 80048fa:	1b64      	subs	r4, r4, r5
 80048fc:	10a4      	asrs	r4, r4, #2
 80048fe:	42a6      	cmp	r6, r4
 8004900:	d105      	bne.n	800490e <__libc_init_array+0x2e>
 8004902:	bd70      	pop	{r4, r5, r6, pc}
 8004904:	f855 3b04 	ldr.w	r3, [r5], #4
 8004908:	4798      	blx	r3
 800490a:	3601      	adds	r6, #1
 800490c:	e7ee      	b.n	80048ec <__libc_init_array+0xc>
 800490e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004912:	4798      	blx	r3
 8004914:	3601      	adds	r6, #1
 8004916:	e7f2      	b.n	80048fe <__libc_init_array+0x1e>
 8004918:	080052e8 	.word	0x080052e8
 800491c:	080052e8 	.word	0x080052e8
 8004920:	080052e8 	.word	0x080052e8
 8004924:	080052ec 	.word	0x080052ec

08004928 <memset>:
 8004928:	4603      	mov	r3, r0
 800492a:	4402      	add	r2, r0
 800492c:	4293      	cmp	r3, r2
 800492e:	d100      	bne.n	8004932 <memset+0xa>
 8004930:	4770      	bx	lr
 8004932:	f803 1b01 	strb.w	r1, [r3], #1
 8004936:	e7f9      	b.n	800492c <memset+0x4>

08004938 <siprintf>:
 8004938:	b40e      	push	{r1, r2, r3}
 800493a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800493e:	b500      	push	{lr}
 8004940:	b09c      	sub	sp, #112	; 0x70
 8004942:	ab1d      	add	r3, sp, #116	; 0x74
 8004944:	9002      	str	r0, [sp, #8]
 8004946:	9006      	str	r0, [sp, #24]
 8004948:	9107      	str	r1, [sp, #28]
 800494a:	9104      	str	r1, [sp, #16]
 800494c:	4808      	ldr	r0, [pc, #32]	; (8004970 <siprintf+0x38>)
 800494e:	4909      	ldr	r1, [pc, #36]	; (8004974 <siprintf+0x3c>)
 8004950:	f853 2b04 	ldr.w	r2, [r3], #4
 8004954:	9105      	str	r1, [sp, #20]
 8004956:	6800      	ldr	r0, [r0, #0]
 8004958:	a902      	add	r1, sp, #8
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	f000 f868 	bl	8004a30 <_svfiprintf_r>
 8004960:	2200      	movs	r2, #0
 8004962:	9b02      	ldr	r3, [sp, #8]
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	b01c      	add	sp, #112	; 0x70
 8004968:	f85d eb04 	ldr.w	lr, [sp], #4
 800496c:	b003      	add	sp, #12
 800496e:	4770      	bx	lr
 8004970:	20000014 	.word	0x20000014
 8004974:	ffff0208 	.word	0xffff0208

08004978 <__ssputs_r>:
 8004978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800497c:	688e      	ldr	r6, [r1, #8]
 800497e:	4682      	mov	sl, r0
 8004980:	429e      	cmp	r6, r3
 8004982:	460c      	mov	r4, r1
 8004984:	4690      	mov	r8, r2
 8004986:	461f      	mov	r7, r3
 8004988:	d838      	bhi.n	80049fc <__ssputs_r+0x84>
 800498a:	898a      	ldrh	r2, [r1, #12]
 800498c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004990:	d032      	beq.n	80049f8 <__ssputs_r+0x80>
 8004992:	6825      	ldr	r5, [r4, #0]
 8004994:	6909      	ldr	r1, [r1, #16]
 8004996:	3301      	adds	r3, #1
 8004998:	eba5 0901 	sub.w	r9, r5, r1
 800499c:	6965      	ldr	r5, [r4, #20]
 800499e:	444b      	add	r3, r9
 80049a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049a8:	106d      	asrs	r5, r5, #1
 80049aa:	429d      	cmp	r5, r3
 80049ac:	bf38      	it	cc
 80049ae:	461d      	movcc	r5, r3
 80049b0:	0553      	lsls	r3, r2, #21
 80049b2:	d531      	bpl.n	8004a18 <__ssputs_r+0xa0>
 80049b4:	4629      	mov	r1, r5
 80049b6:	f000 fb6f 	bl	8005098 <_malloc_r>
 80049ba:	4606      	mov	r6, r0
 80049bc:	b950      	cbnz	r0, 80049d4 <__ssputs_r+0x5c>
 80049be:	230c      	movs	r3, #12
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	f8ca 3000 	str.w	r3, [sl]
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ce:	81a3      	strh	r3, [r4, #12]
 80049d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d4:	464a      	mov	r2, r9
 80049d6:	6921      	ldr	r1, [r4, #16]
 80049d8:	f000 face 	bl	8004f78 <memcpy>
 80049dc:	89a3      	ldrh	r3, [r4, #12]
 80049de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	6126      	str	r6, [r4, #16]
 80049ea:	444e      	add	r6, r9
 80049ec:	6026      	str	r6, [r4, #0]
 80049ee:	463e      	mov	r6, r7
 80049f0:	6165      	str	r5, [r4, #20]
 80049f2:	eba5 0509 	sub.w	r5, r5, r9
 80049f6:	60a5      	str	r5, [r4, #8]
 80049f8:	42be      	cmp	r6, r7
 80049fa:	d900      	bls.n	80049fe <__ssputs_r+0x86>
 80049fc:	463e      	mov	r6, r7
 80049fe:	4632      	mov	r2, r6
 8004a00:	4641      	mov	r1, r8
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	f000 fac6 	bl	8004f94 <memmove>
 8004a08:	68a3      	ldr	r3, [r4, #8]
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	1b9b      	subs	r3, r3, r6
 8004a0e:	60a3      	str	r3, [r4, #8]
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	4433      	add	r3, r6
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	e7db      	b.n	80049d0 <__ssputs_r+0x58>
 8004a18:	462a      	mov	r2, r5
 8004a1a:	f000 fbb1 	bl	8005180 <_realloc_r>
 8004a1e:	4606      	mov	r6, r0
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d1e1      	bne.n	80049e8 <__ssputs_r+0x70>
 8004a24:	4650      	mov	r0, sl
 8004a26:	6921      	ldr	r1, [r4, #16]
 8004a28:	f000 face 	bl	8004fc8 <_free_r>
 8004a2c:	e7c7      	b.n	80049be <__ssputs_r+0x46>
	...

08004a30 <_svfiprintf_r>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	4698      	mov	r8, r3
 8004a36:	898b      	ldrh	r3, [r1, #12]
 8004a38:	4607      	mov	r7, r0
 8004a3a:	061b      	lsls	r3, r3, #24
 8004a3c:	460d      	mov	r5, r1
 8004a3e:	4614      	mov	r4, r2
 8004a40:	b09d      	sub	sp, #116	; 0x74
 8004a42:	d50e      	bpl.n	8004a62 <_svfiprintf_r+0x32>
 8004a44:	690b      	ldr	r3, [r1, #16]
 8004a46:	b963      	cbnz	r3, 8004a62 <_svfiprintf_r+0x32>
 8004a48:	2140      	movs	r1, #64	; 0x40
 8004a4a:	f000 fb25 	bl	8005098 <_malloc_r>
 8004a4e:	6028      	str	r0, [r5, #0]
 8004a50:	6128      	str	r0, [r5, #16]
 8004a52:	b920      	cbnz	r0, 8004a5e <_svfiprintf_r+0x2e>
 8004a54:	230c      	movs	r3, #12
 8004a56:	603b      	str	r3, [r7, #0]
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5c:	e0d1      	b.n	8004c02 <_svfiprintf_r+0x1d2>
 8004a5e:	2340      	movs	r3, #64	; 0x40
 8004a60:	616b      	str	r3, [r5, #20]
 8004a62:	2300      	movs	r3, #0
 8004a64:	9309      	str	r3, [sp, #36]	; 0x24
 8004a66:	2320      	movs	r3, #32
 8004a68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a6c:	2330      	movs	r3, #48	; 0x30
 8004a6e:	f04f 0901 	mov.w	r9, #1
 8004a72:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004c1c <_svfiprintf_r+0x1ec>
 8004a7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a7e:	4623      	mov	r3, r4
 8004a80:	469a      	mov	sl, r3
 8004a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a86:	b10a      	cbz	r2, 8004a8c <_svfiprintf_r+0x5c>
 8004a88:	2a25      	cmp	r2, #37	; 0x25
 8004a8a:	d1f9      	bne.n	8004a80 <_svfiprintf_r+0x50>
 8004a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8004a90:	d00b      	beq.n	8004aaa <_svfiprintf_r+0x7a>
 8004a92:	465b      	mov	r3, fp
 8004a94:	4622      	mov	r2, r4
 8004a96:	4629      	mov	r1, r5
 8004a98:	4638      	mov	r0, r7
 8004a9a:	f7ff ff6d 	bl	8004978 <__ssputs_r>
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f000 80aa 	beq.w	8004bf8 <_svfiprintf_r+0x1c8>
 8004aa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aa6:	445a      	add	r2, fp
 8004aa8:	9209      	str	r2, [sp, #36]	; 0x24
 8004aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f000 80a2 	beq.w	8004bf8 <_svfiprintf_r+0x1c8>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004abe:	f10a 0a01 	add.w	sl, sl, #1
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	9307      	str	r3, [sp, #28]
 8004ac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004aca:	931a      	str	r3, [sp, #104]	; 0x68
 8004acc:	4654      	mov	r4, sl
 8004ace:	2205      	movs	r2, #5
 8004ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad4:	4851      	ldr	r0, [pc, #324]	; (8004c1c <_svfiprintf_r+0x1ec>)
 8004ad6:	f000 fa41 	bl	8004f5c <memchr>
 8004ada:	9a04      	ldr	r2, [sp, #16]
 8004adc:	b9d8      	cbnz	r0, 8004b16 <_svfiprintf_r+0xe6>
 8004ade:	06d0      	lsls	r0, r2, #27
 8004ae0:	bf44      	itt	mi
 8004ae2:	2320      	movmi	r3, #32
 8004ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ae8:	0711      	lsls	r1, r2, #28
 8004aea:	bf44      	itt	mi
 8004aec:	232b      	movmi	r3, #43	; 0x2b
 8004aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004af2:	f89a 3000 	ldrb.w	r3, [sl]
 8004af6:	2b2a      	cmp	r3, #42	; 0x2a
 8004af8:	d015      	beq.n	8004b26 <_svfiprintf_r+0xf6>
 8004afa:	4654      	mov	r4, sl
 8004afc:	2000      	movs	r0, #0
 8004afe:	f04f 0c0a 	mov.w	ip, #10
 8004b02:	9a07      	ldr	r2, [sp, #28]
 8004b04:	4621      	mov	r1, r4
 8004b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b0a:	3b30      	subs	r3, #48	; 0x30
 8004b0c:	2b09      	cmp	r3, #9
 8004b0e:	d94e      	bls.n	8004bae <_svfiprintf_r+0x17e>
 8004b10:	b1b0      	cbz	r0, 8004b40 <_svfiprintf_r+0x110>
 8004b12:	9207      	str	r2, [sp, #28]
 8004b14:	e014      	b.n	8004b40 <_svfiprintf_r+0x110>
 8004b16:	eba0 0308 	sub.w	r3, r0, r8
 8004b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	46a2      	mov	sl, r4
 8004b22:	9304      	str	r3, [sp, #16]
 8004b24:	e7d2      	b.n	8004acc <_svfiprintf_r+0x9c>
 8004b26:	9b03      	ldr	r3, [sp, #12]
 8004b28:	1d19      	adds	r1, r3, #4
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	9103      	str	r1, [sp, #12]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	bfbb      	ittet	lt
 8004b32:	425b      	neglt	r3, r3
 8004b34:	f042 0202 	orrlt.w	r2, r2, #2
 8004b38:	9307      	strge	r3, [sp, #28]
 8004b3a:	9307      	strlt	r3, [sp, #28]
 8004b3c:	bfb8      	it	lt
 8004b3e:	9204      	strlt	r2, [sp, #16]
 8004b40:	7823      	ldrb	r3, [r4, #0]
 8004b42:	2b2e      	cmp	r3, #46	; 0x2e
 8004b44:	d10c      	bne.n	8004b60 <_svfiprintf_r+0x130>
 8004b46:	7863      	ldrb	r3, [r4, #1]
 8004b48:	2b2a      	cmp	r3, #42	; 0x2a
 8004b4a:	d135      	bne.n	8004bb8 <_svfiprintf_r+0x188>
 8004b4c:	9b03      	ldr	r3, [sp, #12]
 8004b4e:	3402      	adds	r4, #2
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	9203      	str	r2, [sp, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bfb8      	it	lt
 8004b5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b5e:	9305      	str	r3, [sp, #20]
 8004b60:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004c20 <_svfiprintf_r+0x1f0>
 8004b64:	2203      	movs	r2, #3
 8004b66:	4650      	mov	r0, sl
 8004b68:	7821      	ldrb	r1, [r4, #0]
 8004b6a:	f000 f9f7 	bl	8004f5c <memchr>
 8004b6e:	b140      	cbz	r0, 8004b82 <_svfiprintf_r+0x152>
 8004b70:	2340      	movs	r3, #64	; 0x40
 8004b72:	eba0 000a 	sub.w	r0, r0, sl
 8004b76:	fa03 f000 	lsl.w	r0, r3, r0
 8004b7a:	9b04      	ldr	r3, [sp, #16]
 8004b7c:	3401      	adds	r4, #1
 8004b7e:	4303      	orrs	r3, r0
 8004b80:	9304      	str	r3, [sp, #16]
 8004b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b86:	2206      	movs	r2, #6
 8004b88:	4826      	ldr	r0, [pc, #152]	; (8004c24 <_svfiprintf_r+0x1f4>)
 8004b8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b8e:	f000 f9e5 	bl	8004f5c <memchr>
 8004b92:	2800      	cmp	r0, #0
 8004b94:	d038      	beq.n	8004c08 <_svfiprintf_r+0x1d8>
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <_svfiprintf_r+0x1f8>)
 8004b98:	bb1b      	cbnz	r3, 8004be2 <_svfiprintf_r+0x1b2>
 8004b9a:	9b03      	ldr	r3, [sp, #12]
 8004b9c:	3307      	adds	r3, #7
 8004b9e:	f023 0307 	bic.w	r3, r3, #7
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	9303      	str	r3, [sp, #12]
 8004ba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ba8:	4433      	add	r3, r6
 8004baa:	9309      	str	r3, [sp, #36]	; 0x24
 8004bac:	e767      	b.n	8004a7e <_svfiprintf_r+0x4e>
 8004bae:	460c      	mov	r4, r1
 8004bb0:	2001      	movs	r0, #1
 8004bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bb6:	e7a5      	b.n	8004b04 <_svfiprintf_r+0xd4>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f04f 0c0a 	mov.w	ip, #10
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	3401      	adds	r4, #1
 8004bc2:	9305      	str	r3, [sp, #20]
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bca:	3a30      	subs	r2, #48	; 0x30
 8004bcc:	2a09      	cmp	r2, #9
 8004bce:	d903      	bls.n	8004bd8 <_svfiprintf_r+0x1a8>
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d0c5      	beq.n	8004b60 <_svfiprintf_r+0x130>
 8004bd4:	9105      	str	r1, [sp, #20]
 8004bd6:	e7c3      	b.n	8004b60 <_svfiprintf_r+0x130>
 8004bd8:	4604      	mov	r4, r0
 8004bda:	2301      	movs	r3, #1
 8004bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004be0:	e7f0      	b.n	8004bc4 <_svfiprintf_r+0x194>
 8004be2:	ab03      	add	r3, sp, #12
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	462a      	mov	r2, r5
 8004be8:	4638      	mov	r0, r7
 8004bea:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <_svfiprintf_r+0x1fc>)
 8004bec:	a904      	add	r1, sp, #16
 8004bee:	f3af 8000 	nop.w
 8004bf2:	1c42      	adds	r2, r0, #1
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	d1d6      	bne.n	8004ba6 <_svfiprintf_r+0x176>
 8004bf8:	89ab      	ldrh	r3, [r5, #12]
 8004bfa:	065b      	lsls	r3, r3, #25
 8004bfc:	f53f af2c 	bmi.w	8004a58 <_svfiprintf_r+0x28>
 8004c00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c02:	b01d      	add	sp, #116	; 0x74
 8004c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c08:	ab03      	add	r3, sp, #12
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	462a      	mov	r2, r5
 8004c0e:	4638      	mov	r0, r7
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <_svfiprintf_r+0x1fc>)
 8004c12:	a904      	add	r1, sp, #16
 8004c14:	f000 f87c 	bl	8004d10 <_printf_i>
 8004c18:	e7eb      	b.n	8004bf2 <_svfiprintf_r+0x1c2>
 8004c1a:	bf00      	nop
 8004c1c:	080052b4 	.word	0x080052b4
 8004c20:	080052ba 	.word	0x080052ba
 8004c24:	080052be 	.word	0x080052be
 8004c28:	00000000 	.word	0x00000000
 8004c2c:	08004979 	.word	0x08004979

08004c30 <_printf_common>:
 8004c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	4616      	mov	r6, r2
 8004c36:	4699      	mov	r9, r3
 8004c38:	688a      	ldr	r2, [r1, #8]
 8004c3a:	690b      	ldr	r3, [r1, #16]
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	bfb8      	it	lt
 8004c42:	4613      	movlt	r3, r2
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c50:	b10a      	cbz	r2, 8004c56 <_printf_common+0x26>
 8004c52:	3301      	adds	r3, #1
 8004c54:	6033      	str	r3, [r6, #0]
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	0699      	lsls	r1, r3, #26
 8004c5a:	bf42      	ittt	mi
 8004c5c:	6833      	ldrmi	r3, [r6, #0]
 8004c5e:	3302      	addmi	r3, #2
 8004c60:	6033      	strmi	r3, [r6, #0]
 8004c62:	6825      	ldr	r5, [r4, #0]
 8004c64:	f015 0506 	ands.w	r5, r5, #6
 8004c68:	d106      	bne.n	8004c78 <_printf_common+0x48>
 8004c6a:	f104 0a19 	add.w	sl, r4, #25
 8004c6e:	68e3      	ldr	r3, [r4, #12]
 8004c70:	6832      	ldr	r2, [r6, #0]
 8004c72:	1a9b      	subs	r3, r3, r2
 8004c74:	42ab      	cmp	r3, r5
 8004c76:	dc28      	bgt.n	8004cca <_printf_common+0x9a>
 8004c78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c7c:	1e13      	subs	r3, r2, #0
 8004c7e:	6822      	ldr	r2, [r4, #0]
 8004c80:	bf18      	it	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	0692      	lsls	r2, r2, #26
 8004c86:	d42d      	bmi.n	8004ce4 <_printf_common+0xb4>
 8004c88:	4649      	mov	r1, r9
 8004c8a:	4638      	mov	r0, r7
 8004c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c90:	47c0      	blx	r8
 8004c92:	3001      	adds	r0, #1
 8004c94:	d020      	beq.n	8004cd8 <_printf_common+0xa8>
 8004c96:	6823      	ldr	r3, [r4, #0]
 8004c98:	68e5      	ldr	r5, [r4, #12]
 8004c9a:	f003 0306 	and.w	r3, r3, #6
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	bf18      	it	ne
 8004ca2:	2500      	movne	r5, #0
 8004ca4:	6832      	ldr	r2, [r6, #0]
 8004ca6:	f04f 0600 	mov.w	r6, #0
 8004caa:	68a3      	ldr	r3, [r4, #8]
 8004cac:	bf08      	it	eq
 8004cae:	1aad      	subeq	r5, r5, r2
 8004cb0:	6922      	ldr	r2, [r4, #16]
 8004cb2:	bf08      	it	eq
 8004cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bfc4      	itt	gt
 8004cbc:	1a9b      	subgt	r3, r3, r2
 8004cbe:	18ed      	addgt	r5, r5, r3
 8004cc0:	341a      	adds	r4, #26
 8004cc2:	42b5      	cmp	r5, r6
 8004cc4:	d11a      	bne.n	8004cfc <_printf_common+0xcc>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e008      	b.n	8004cdc <_printf_common+0xac>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	4652      	mov	r2, sl
 8004cce:	4649      	mov	r1, r9
 8004cd0:	4638      	mov	r0, r7
 8004cd2:	47c0      	blx	r8
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d103      	bne.n	8004ce0 <_printf_common+0xb0>
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce0:	3501      	adds	r5, #1
 8004ce2:	e7c4      	b.n	8004c6e <_printf_common+0x3e>
 8004ce4:	2030      	movs	r0, #48	; 0x30
 8004ce6:	18e1      	adds	r1, r4, r3
 8004ce8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf2:	4422      	add	r2, r4
 8004cf4:	3302      	adds	r3, #2
 8004cf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cfa:	e7c5      	b.n	8004c88 <_printf_common+0x58>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	4622      	mov	r2, r4
 8004d00:	4649      	mov	r1, r9
 8004d02:	4638      	mov	r0, r7
 8004d04:	47c0      	blx	r8
 8004d06:	3001      	adds	r0, #1
 8004d08:	d0e6      	beq.n	8004cd8 <_printf_common+0xa8>
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7d9      	b.n	8004cc2 <_printf_common+0x92>
	...

08004d10 <_printf_i>:
 8004d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	7e0f      	ldrb	r7, [r1, #24]
 8004d16:	4691      	mov	r9, r2
 8004d18:	2f78      	cmp	r7, #120	; 0x78
 8004d1a:	4680      	mov	r8, r0
 8004d1c:	460c      	mov	r4, r1
 8004d1e:	469a      	mov	sl, r3
 8004d20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d26:	d807      	bhi.n	8004d38 <_printf_i+0x28>
 8004d28:	2f62      	cmp	r7, #98	; 0x62
 8004d2a:	d80a      	bhi.n	8004d42 <_printf_i+0x32>
 8004d2c:	2f00      	cmp	r7, #0
 8004d2e:	f000 80d9 	beq.w	8004ee4 <_printf_i+0x1d4>
 8004d32:	2f58      	cmp	r7, #88	; 0x58
 8004d34:	f000 80a4 	beq.w	8004e80 <_printf_i+0x170>
 8004d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d40:	e03a      	b.n	8004db8 <_printf_i+0xa8>
 8004d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d46:	2b15      	cmp	r3, #21
 8004d48:	d8f6      	bhi.n	8004d38 <_printf_i+0x28>
 8004d4a:	a101      	add	r1, pc, #4	; (adr r1, 8004d50 <_printf_i+0x40>)
 8004d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d50:	08004da9 	.word	0x08004da9
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004d39 	.word	0x08004d39
 8004d5c:	08004d39 	.word	0x08004d39
 8004d60:	08004d39 	.word	0x08004d39
 8004d64:	08004d39 	.word	0x08004d39
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004d39 	.word	0x08004d39
 8004d70:	08004d39 	.word	0x08004d39
 8004d74:	08004d39 	.word	0x08004d39
 8004d78:	08004d39 	.word	0x08004d39
 8004d7c:	08004ecb 	.word	0x08004ecb
 8004d80:	08004ded 	.word	0x08004ded
 8004d84:	08004ead 	.word	0x08004ead
 8004d88:	08004d39 	.word	0x08004d39
 8004d8c:	08004d39 	.word	0x08004d39
 8004d90:	08004eed 	.word	0x08004eed
 8004d94:	08004d39 	.word	0x08004d39
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004d39 	.word	0x08004d39
 8004da0:	08004d39 	.word	0x08004d39
 8004da4:	08004eb5 	.word	0x08004eb5
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	1d1a      	adds	r2, r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	602a      	str	r2, [r5, #0]
 8004db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0a4      	b.n	8004f06 <_printf_i+0x1f6>
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	6829      	ldr	r1, [r5, #0]
 8004dc0:	0606      	lsls	r6, r0, #24
 8004dc2:	f101 0304 	add.w	r3, r1, #4
 8004dc6:	d50a      	bpl.n	8004dde <_printf_i+0xce>
 8004dc8:	680e      	ldr	r6, [r1, #0]
 8004dca:	602b      	str	r3, [r5, #0]
 8004dcc:	2e00      	cmp	r6, #0
 8004dce:	da03      	bge.n	8004dd8 <_printf_i+0xc8>
 8004dd0:	232d      	movs	r3, #45	; 0x2d
 8004dd2:	4276      	negs	r6, r6
 8004dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd8:	230a      	movs	r3, #10
 8004dda:	485e      	ldr	r0, [pc, #376]	; (8004f54 <_printf_i+0x244>)
 8004ddc:	e019      	b.n	8004e12 <_printf_i+0x102>
 8004dde:	680e      	ldr	r6, [r1, #0]
 8004de0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	bf18      	it	ne
 8004de8:	b236      	sxthne	r6, r6
 8004dea:	e7ef      	b.n	8004dcc <_printf_i+0xbc>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	6820      	ldr	r0, [r4, #0]
 8004df0:	1d19      	adds	r1, r3, #4
 8004df2:	6029      	str	r1, [r5, #0]
 8004df4:	0601      	lsls	r1, r0, #24
 8004df6:	d501      	bpl.n	8004dfc <_printf_i+0xec>
 8004df8:	681e      	ldr	r6, [r3, #0]
 8004dfa:	e002      	b.n	8004e02 <_printf_i+0xf2>
 8004dfc:	0646      	lsls	r6, r0, #25
 8004dfe:	d5fb      	bpl.n	8004df8 <_printf_i+0xe8>
 8004e00:	881e      	ldrh	r6, [r3, #0]
 8004e02:	2f6f      	cmp	r7, #111	; 0x6f
 8004e04:	bf0c      	ite	eq
 8004e06:	2308      	moveq	r3, #8
 8004e08:	230a      	movne	r3, #10
 8004e0a:	4852      	ldr	r0, [pc, #328]	; (8004f54 <_printf_i+0x244>)
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e12:	6865      	ldr	r5, [r4, #4]
 8004e14:	2d00      	cmp	r5, #0
 8004e16:	bfa8      	it	ge
 8004e18:	6821      	ldrge	r1, [r4, #0]
 8004e1a:	60a5      	str	r5, [r4, #8]
 8004e1c:	bfa4      	itt	ge
 8004e1e:	f021 0104 	bicge.w	r1, r1, #4
 8004e22:	6021      	strge	r1, [r4, #0]
 8004e24:	b90e      	cbnz	r6, 8004e2a <_printf_i+0x11a>
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	d04d      	beq.n	8004ec6 <_printf_i+0x1b6>
 8004e2a:	4615      	mov	r5, r2
 8004e2c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e30:	fb03 6711 	mls	r7, r3, r1, r6
 8004e34:	5dc7      	ldrb	r7, [r0, r7]
 8004e36:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e3a:	4637      	mov	r7, r6
 8004e3c:	42bb      	cmp	r3, r7
 8004e3e:	460e      	mov	r6, r1
 8004e40:	d9f4      	bls.n	8004e2c <_printf_i+0x11c>
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d10b      	bne.n	8004e5e <_printf_i+0x14e>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	07de      	lsls	r6, r3, #31
 8004e4a:	d508      	bpl.n	8004e5e <_printf_i+0x14e>
 8004e4c:	6923      	ldr	r3, [r4, #16]
 8004e4e:	6861      	ldr	r1, [r4, #4]
 8004e50:	4299      	cmp	r1, r3
 8004e52:	bfde      	ittt	le
 8004e54:	2330      	movle	r3, #48	; 0x30
 8004e56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e5e:	1b52      	subs	r2, r2, r5
 8004e60:	6122      	str	r2, [r4, #16]
 8004e62:	464b      	mov	r3, r9
 8004e64:	4621      	mov	r1, r4
 8004e66:	4640      	mov	r0, r8
 8004e68:	f8cd a000 	str.w	sl, [sp]
 8004e6c:	aa03      	add	r2, sp, #12
 8004e6e:	f7ff fedf 	bl	8004c30 <_printf_common>
 8004e72:	3001      	adds	r0, #1
 8004e74:	d14c      	bne.n	8004f10 <_printf_i+0x200>
 8004e76:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7a:	b004      	add	sp, #16
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e80:	4834      	ldr	r0, [pc, #208]	; (8004f54 <_printf_i+0x244>)
 8004e82:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e86:	6829      	ldr	r1, [r5, #0]
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e8e:	6029      	str	r1, [r5, #0]
 8004e90:	061d      	lsls	r5, r3, #24
 8004e92:	d514      	bpl.n	8004ebe <_printf_i+0x1ae>
 8004e94:	07df      	lsls	r7, r3, #31
 8004e96:	bf44      	itt	mi
 8004e98:	f043 0320 	orrmi.w	r3, r3, #32
 8004e9c:	6023      	strmi	r3, [r4, #0]
 8004e9e:	b91e      	cbnz	r6, 8004ea8 <_printf_i+0x198>
 8004ea0:	6823      	ldr	r3, [r4, #0]
 8004ea2:	f023 0320 	bic.w	r3, r3, #32
 8004ea6:	6023      	str	r3, [r4, #0]
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	e7af      	b.n	8004e0c <_printf_i+0xfc>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	f043 0320 	orr.w	r3, r3, #32
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	2378      	movs	r3, #120	; 0x78
 8004eb6:	4828      	ldr	r0, [pc, #160]	; (8004f58 <_printf_i+0x248>)
 8004eb8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ebc:	e7e3      	b.n	8004e86 <_printf_i+0x176>
 8004ebe:	0659      	lsls	r1, r3, #25
 8004ec0:	bf48      	it	mi
 8004ec2:	b2b6      	uxthmi	r6, r6
 8004ec4:	e7e6      	b.n	8004e94 <_printf_i+0x184>
 8004ec6:	4615      	mov	r5, r2
 8004ec8:	e7bb      	b.n	8004e42 <_printf_i+0x132>
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	6826      	ldr	r6, [r4, #0]
 8004ece:	1d18      	adds	r0, r3, #4
 8004ed0:	6961      	ldr	r1, [r4, #20]
 8004ed2:	6028      	str	r0, [r5, #0]
 8004ed4:	0635      	lsls	r5, r6, #24
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	d501      	bpl.n	8004ede <_printf_i+0x1ce>
 8004eda:	6019      	str	r1, [r3, #0]
 8004edc:	e002      	b.n	8004ee4 <_printf_i+0x1d4>
 8004ede:	0670      	lsls	r0, r6, #25
 8004ee0:	d5fb      	bpl.n	8004eda <_printf_i+0x1ca>
 8004ee2:	8019      	strh	r1, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4615      	mov	r5, r2
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	e7ba      	b.n	8004e62 <_printf_i+0x152>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	2100      	movs	r1, #0
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	681d      	ldr	r5, [r3, #0]
 8004ef6:	6862      	ldr	r2, [r4, #4]
 8004ef8:	4628      	mov	r0, r5
 8004efa:	f000 f82f 	bl	8004f5c <memchr>
 8004efe:	b108      	cbz	r0, 8004f04 <_printf_i+0x1f4>
 8004f00:	1b40      	subs	r0, r0, r5
 8004f02:	6060      	str	r0, [r4, #4]
 8004f04:	6863      	ldr	r3, [r4, #4]
 8004f06:	6123      	str	r3, [r4, #16]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f0e:	e7a8      	b.n	8004e62 <_printf_i+0x152>
 8004f10:	462a      	mov	r2, r5
 8004f12:	4649      	mov	r1, r9
 8004f14:	4640      	mov	r0, r8
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	47d0      	blx	sl
 8004f1a:	3001      	adds	r0, #1
 8004f1c:	d0ab      	beq.n	8004e76 <_printf_i+0x166>
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	079b      	lsls	r3, r3, #30
 8004f22:	d413      	bmi.n	8004f4c <_printf_i+0x23c>
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	bfb8      	it	lt
 8004f2c:	4618      	movlt	r0, r3
 8004f2e:	e7a4      	b.n	8004e7a <_printf_i+0x16a>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4632      	mov	r2, r6
 8004f34:	4649      	mov	r1, r9
 8004f36:	4640      	mov	r0, r8
 8004f38:	47d0      	blx	sl
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d09b      	beq.n	8004e76 <_printf_i+0x166>
 8004f3e:	3501      	adds	r5, #1
 8004f40:	68e3      	ldr	r3, [r4, #12]
 8004f42:	9903      	ldr	r1, [sp, #12]
 8004f44:	1a5b      	subs	r3, r3, r1
 8004f46:	42ab      	cmp	r3, r5
 8004f48:	dcf2      	bgt.n	8004f30 <_printf_i+0x220>
 8004f4a:	e7eb      	b.n	8004f24 <_printf_i+0x214>
 8004f4c:	2500      	movs	r5, #0
 8004f4e:	f104 0619 	add.w	r6, r4, #25
 8004f52:	e7f5      	b.n	8004f40 <_printf_i+0x230>
 8004f54:	080052c5 	.word	0x080052c5
 8004f58:	080052d6 	.word	0x080052d6

08004f5c <memchr>:
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	b2c9      	uxtb	r1, r1
 8004f62:	4402      	add	r2, r0
 8004f64:	4293      	cmp	r3, r2
 8004f66:	4618      	mov	r0, r3
 8004f68:	d101      	bne.n	8004f6e <memchr+0x12>
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	e003      	b.n	8004f76 <memchr+0x1a>
 8004f6e:	7804      	ldrb	r4, [r0, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	428c      	cmp	r4, r1
 8004f74:	d1f6      	bne.n	8004f64 <memchr+0x8>
 8004f76:	bd10      	pop	{r4, pc}

08004f78 <memcpy>:
 8004f78:	440a      	add	r2, r1
 8004f7a:	4291      	cmp	r1, r2
 8004f7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f80:	d100      	bne.n	8004f84 <memcpy+0xc>
 8004f82:	4770      	bx	lr
 8004f84:	b510      	push	{r4, lr}
 8004f86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f8a:	4291      	cmp	r1, r2
 8004f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f90:	d1f9      	bne.n	8004f86 <memcpy+0xe>
 8004f92:	bd10      	pop	{r4, pc}

08004f94 <memmove>:
 8004f94:	4288      	cmp	r0, r1
 8004f96:	b510      	push	{r4, lr}
 8004f98:	eb01 0402 	add.w	r4, r1, r2
 8004f9c:	d902      	bls.n	8004fa4 <memmove+0x10>
 8004f9e:	4284      	cmp	r4, r0
 8004fa0:	4623      	mov	r3, r4
 8004fa2:	d807      	bhi.n	8004fb4 <memmove+0x20>
 8004fa4:	1e43      	subs	r3, r0, #1
 8004fa6:	42a1      	cmp	r1, r4
 8004fa8:	d008      	beq.n	8004fbc <memmove+0x28>
 8004faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004fb2:	e7f8      	b.n	8004fa6 <memmove+0x12>
 8004fb4:	4601      	mov	r1, r0
 8004fb6:	4402      	add	r2, r0
 8004fb8:	428a      	cmp	r2, r1
 8004fba:	d100      	bne.n	8004fbe <memmove+0x2a>
 8004fbc:	bd10      	pop	{r4, pc}
 8004fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fc6:	e7f7      	b.n	8004fb8 <memmove+0x24>

08004fc8 <_free_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4605      	mov	r5, r0
 8004fcc:	2900      	cmp	r1, #0
 8004fce:	d040      	beq.n	8005052 <_free_r+0x8a>
 8004fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd4:	1f0c      	subs	r4, r1, #4
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bfb8      	it	lt
 8004fda:	18e4      	addlt	r4, r4, r3
 8004fdc:	f000 f910 	bl	8005200 <__malloc_lock>
 8004fe0:	4a1c      	ldr	r2, [pc, #112]	; (8005054 <_free_r+0x8c>)
 8004fe2:	6813      	ldr	r3, [r2, #0]
 8004fe4:	b933      	cbnz	r3, 8004ff4 <_free_r+0x2c>
 8004fe6:	6063      	str	r3, [r4, #4]
 8004fe8:	6014      	str	r4, [r2, #0]
 8004fea:	4628      	mov	r0, r5
 8004fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ff0:	f000 b90c 	b.w	800520c <__malloc_unlock>
 8004ff4:	42a3      	cmp	r3, r4
 8004ff6:	d908      	bls.n	800500a <_free_r+0x42>
 8004ff8:	6820      	ldr	r0, [r4, #0]
 8004ffa:	1821      	adds	r1, r4, r0
 8004ffc:	428b      	cmp	r3, r1
 8004ffe:	bf01      	itttt	eq
 8005000:	6819      	ldreq	r1, [r3, #0]
 8005002:	685b      	ldreq	r3, [r3, #4]
 8005004:	1809      	addeq	r1, r1, r0
 8005006:	6021      	streq	r1, [r4, #0]
 8005008:	e7ed      	b.n	8004fe6 <_free_r+0x1e>
 800500a:	461a      	mov	r2, r3
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	b10b      	cbz	r3, 8005014 <_free_r+0x4c>
 8005010:	42a3      	cmp	r3, r4
 8005012:	d9fa      	bls.n	800500a <_free_r+0x42>
 8005014:	6811      	ldr	r1, [r2, #0]
 8005016:	1850      	adds	r0, r2, r1
 8005018:	42a0      	cmp	r0, r4
 800501a:	d10b      	bne.n	8005034 <_free_r+0x6c>
 800501c:	6820      	ldr	r0, [r4, #0]
 800501e:	4401      	add	r1, r0
 8005020:	1850      	adds	r0, r2, r1
 8005022:	4283      	cmp	r3, r0
 8005024:	6011      	str	r1, [r2, #0]
 8005026:	d1e0      	bne.n	8004fea <_free_r+0x22>
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	4401      	add	r1, r0
 800502e:	6011      	str	r1, [r2, #0]
 8005030:	6053      	str	r3, [r2, #4]
 8005032:	e7da      	b.n	8004fea <_free_r+0x22>
 8005034:	d902      	bls.n	800503c <_free_r+0x74>
 8005036:	230c      	movs	r3, #12
 8005038:	602b      	str	r3, [r5, #0]
 800503a:	e7d6      	b.n	8004fea <_free_r+0x22>
 800503c:	6820      	ldr	r0, [r4, #0]
 800503e:	1821      	adds	r1, r4, r0
 8005040:	428b      	cmp	r3, r1
 8005042:	bf01      	itttt	eq
 8005044:	6819      	ldreq	r1, [r3, #0]
 8005046:	685b      	ldreq	r3, [r3, #4]
 8005048:	1809      	addeq	r1, r1, r0
 800504a:	6021      	streq	r1, [r4, #0]
 800504c:	6063      	str	r3, [r4, #4]
 800504e:	6054      	str	r4, [r2, #4]
 8005050:	e7cb      	b.n	8004fea <_free_r+0x22>
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000218 	.word	0x20000218

08005058 <sbrk_aligned>:
 8005058:	b570      	push	{r4, r5, r6, lr}
 800505a:	4e0e      	ldr	r6, [pc, #56]	; (8005094 <sbrk_aligned+0x3c>)
 800505c:	460c      	mov	r4, r1
 800505e:	6831      	ldr	r1, [r6, #0]
 8005060:	4605      	mov	r5, r0
 8005062:	b911      	cbnz	r1, 800506a <sbrk_aligned+0x12>
 8005064:	f000 f8bc 	bl	80051e0 <_sbrk_r>
 8005068:	6030      	str	r0, [r6, #0]
 800506a:	4621      	mov	r1, r4
 800506c:	4628      	mov	r0, r5
 800506e:	f000 f8b7 	bl	80051e0 <_sbrk_r>
 8005072:	1c43      	adds	r3, r0, #1
 8005074:	d00a      	beq.n	800508c <sbrk_aligned+0x34>
 8005076:	1cc4      	adds	r4, r0, #3
 8005078:	f024 0403 	bic.w	r4, r4, #3
 800507c:	42a0      	cmp	r0, r4
 800507e:	d007      	beq.n	8005090 <sbrk_aligned+0x38>
 8005080:	1a21      	subs	r1, r4, r0
 8005082:	4628      	mov	r0, r5
 8005084:	f000 f8ac 	bl	80051e0 <_sbrk_r>
 8005088:	3001      	adds	r0, #1
 800508a:	d101      	bne.n	8005090 <sbrk_aligned+0x38>
 800508c:	f04f 34ff 	mov.w	r4, #4294967295
 8005090:	4620      	mov	r0, r4
 8005092:	bd70      	pop	{r4, r5, r6, pc}
 8005094:	2000021c 	.word	0x2000021c

08005098 <_malloc_r>:
 8005098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509c:	1ccd      	adds	r5, r1, #3
 800509e:	f025 0503 	bic.w	r5, r5, #3
 80050a2:	3508      	adds	r5, #8
 80050a4:	2d0c      	cmp	r5, #12
 80050a6:	bf38      	it	cc
 80050a8:	250c      	movcc	r5, #12
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	4607      	mov	r7, r0
 80050ae:	db01      	blt.n	80050b4 <_malloc_r+0x1c>
 80050b0:	42a9      	cmp	r1, r5
 80050b2:	d905      	bls.n	80050c0 <_malloc_r+0x28>
 80050b4:	230c      	movs	r3, #12
 80050b6:	2600      	movs	r6, #0
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	4630      	mov	r0, r6
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	4e2e      	ldr	r6, [pc, #184]	; (800517c <_malloc_r+0xe4>)
 80050c2:	f000 f89d 	bl	8005200 <__malloc_lock>
 80050c6:	6833      	ldr	r3, [r6, #0]
 80050c8:	461c      	mov	r4, r3
 80050ca:	bb34      	cbnz	r4, 800511a <_malloc_r+0x82>
 80050cc:	4629      	mov	r1, r5
 80050ce:	4638      	mov	r0, r7
 80050d0:	f7ff ffc2 	bl	8005058 <sbrk_aligned>
 80050d4:	1c43      	adds	r3, r0, #1
 80050d6:	4604      	mov	r4, r0
 80050d8:	d14d      	bne.n	8005176 <_malloc_r+0xde>
 80050da:	6834      	ldr	r4, [r6, #0]
 80050dc:	4626      	mov	r6, r4
 80050de:	2e00      	cmp	r6, #0
 80050e0:	d140      	bne.n	8005164 <_malloc_r+0xcc>
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	4631      	mov	r1, r6
 80050e6:	4638      	mov	r0, r7
 80050e8:	eb04 0803 	add.w	r8, r4, r3
 80050ec:	f000 f878 	bl	80051e0 <_sbrk_r>
 80050f0:	4580      	cmp	r8, r0
 80050f2:	d13a      	bne.n	800516a <_malloc_r+0xd2>
 80050f4:	6821      	ldr	r1, [r4, #0]
 80050f6:	3503      	adds	r5, #3
 80050f8:	1a6d      	subs	r5, r5, r1
 80050fa:	f025 0503 	bic.w	r5, r5, #3
 80050fe:	3508      	adds	r5, #8
 8005100:	2d0c      	cmp	r5, #12
 8005102:	bf38      	it	cc
 8005104:	250c      	movcc	r5, #12
 8005106:	4638      	mov	r0, r7
 8005108:	4629      	mov	r1, r5
 800510a:	f7ff ffa5 	bl	8005058 <sbrk_aligned>
 800510e:	3001      	adds	r0, #1
 8005110:	d02b      	beq.n	800516a <_malloc_r+0xd2>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	442b      	add	r3, r5
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	e00e      	b.n	8005138 <_malloc_r+0xa0>
 800511a:	6822      	ldr	r2, [r4, #0]
 800511c:	1b52      	subs	r2, r2, r5
 800511e:	d41e      	bmi.n	800515e <_malloc_r+0xc6>
 8005120:	2a0b      	cmp	r2, #11
 8005122:	d916      	bls.n	8005152 <_malloc_r+0xba>
 8005124:	1961      	adds	r1, r4, r5
 8005126:	42a3      	cmp	r3, r4
 8005128:	6025      	str	r5, [r4, #0]
 800512a:	bf18      	it	ne
 800512c:	6059      	strne	r1, [r3, #4]
 800512e:	6863      	ldr	r3, [r4, #4]
 8005130:	bf08      	it	eq
 8005132:	6031      	streq	r1, [r6, #0]
 8005134:	5162      	str	r2, [r4, r5]
 8005136:	604b      	str	r3, [r1, #4]
 8005138:	4638      	mov	r0, r7
 800513a:	f104 060b 	add.w	r6, r4, #11
 800513e:	f000 f865 	bl	800520c <__malloc_unlock>
 8005142:	f026 0607 	bic.w	r6, r6, #7
 8005146:	1d23      	adds	r3, r4, #4
 8005148:	1af2      	subs	r2, r6, r3
 800514a:	d0b6      	beq.n	80050ba <_malloc_r+0x22>
 800514c:	1b9b      	subs	r3, r3, r6
 800514e:	50a3      	str	r3, [r4, r2]
 8005150:	e7b3      	b.n	80050ba <_malloc_r+0x22>
 8005152:	6862      	ldr	r2, [r4, #4]
 8005154:	42a3      	cmp	r3, r4
 8005156:	bf0c      	ite	eq
 8005158:	6032      	streq	r2, [r6, #0]
 800515a:	605a      	strne	r2, [r3, #4]
 800515c:	e7ec      	b.n	8005138 <_malloc_r+0xa0>
 800515e:	4623      	mov	r3, r4
 8005160:	6864      	ldr	r4, [r4, #4]
 8005162:	e7b2      	b.n	80050ca <_malloc_r+0x32>
 8005164:	4634      	mov	r4, r6
 8005166:	6876      	ldr	r6, [r6, #4]
 8005168:	e7b9      	b.n	80050de <_malloc_r+0x46>
 800516a:	230c      	movs	r3, #12
 800516c:	4638      	mov	r0, r7
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	f000 f84c 	bl	800520c <__malloc_unlock>
 8005174:	e7a1      	b.n	80050ba <_malloc_r+0x22>
 8005176:	6025      	str	r5, [r4, #0]
 8005178:	e7de      	b.n	8005138 <_malloc_r+0xa0>
 800517a:	bf00      	nop
 800517c:	20000218 	.word	0x20000218

08005180 <_realloc_r>:
 8005180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005184:	4680      	mov	r8, r0
 8005186:	4614      	mov	r4, r2
 8005188:	460e      	mov	r6, r1
 800518a:	b921      	cbnz	r1, 8005196 <_realloc_r+0x16>
 800518c:	4611      	mov	r1, r2
 800518e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	f7ff bf81 	b.w	8005098 <_malloc_r>
 8005196:	b92a      	cbnz	r2, 80051a4 <_realloc_r+0x24>
 8005198:	f7ff ff16 	bl	8004fc8 <_free_r>
 800519c:	4625      	mov	r5, r4
 800519e:	4628      	mov	r0, r5
 80051a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a4:	f000 f838 	bl	8005218 <_malloc_usable_size_r>
 80051a8:	4284      	cmp	r4, r0
 80051aa:	4607      	mov	r7, r0
 80051ac:	d802      	bhi.n	80051b4 <_realloc_r+0x34>
 80051ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051b2:	d812      	bhi.n	80051da <_realloc_r+0x5a>
 80051b4:	4621      	mov	r1, r4
 80051b6:	4640      	mov	r0, r8
 80051b8:	f7ff ff6e 	bl	8005098 <_malloc_r>
 80051bc:	4605      	mov	r5, r0
 80051be:	2800      	cmp	r0, #0
 80051c0:	d0ed      	beq.n	800519e <_realloc_r+0x1e>
 80051c2:	42bc      	cmp	r4, r7
 80051c4:	4622      	mov	r2, r4
 80051c6:	4631      	mov	r1, r6
 80051c8:	bf28      	it	cs
 80051ca:	463a      	movcs	r2, r7
 80051cc:	f7ff fed4 	bl	8004f78 <memcpy>
 80051d0:	4631      	mov	r1, r6
 80051d2:	4640      	mov	r0, r8
 80051d4:	f7ff fef8 	bl	8004fc8 <_free_r>
 80051d8:	e7e1      	b.n	800519e <_realloc_r+0x1e>
 80051da:	4635      	mov	r5, r6
 80051dc:	e7df      	b.n	800519e <_realloc_r+0x1e>
	...

080051e0 <_sbrk_r>:
 80051e0:	b538      	push	{r3, r4, r5, lr}
 80051e2:	2300      	movs	r3, #0
 80051e4:	4d05      	ldr	r5, [pc, #20]	; (80051fc <_sbrk_r+0x1c>)
 80051e6:	4604      	mov	r4, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	f7fc f816 	bl	800121c <_sbrk>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_sbrk_r+0x1a>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_sbrk_r+0x1a>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20000220 	.word	0x20000220

08005200 <__malloc_lock>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__malloc_lock+0x8>)
 8005202:	f000 b811 	b.w	8005228 <__retarget_lock_acquire_recursive>
 8005206:	bf00      	nop
 8005208:	20000224 	.word	0x20000224

0800520c <__malloc_unlock>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__malloc_unlock+0x8>)
 800520e:	f000 b80c 	b.w	800522a <__retarget_lock_release_recursive>
 8005212:	bf00      	nop
 8005214:	20000224 	.word	0x20000224

08005218 <_malloc_usable_size_r>:
 8005218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521c:	1f18      	subs	r0, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfbc      	itt	lt
 8005222:	580b      	ldrlt	r3, [r1, r0]
 8005224:	18c0      	addlt	r0, r0, r3
 8005226:	4770      	bx	lr

08005228 <__retarget_lock_acquire_recursive>:
 8005228:	4770      	bx	lr

0800522a <__retarget_lock_release_recursive>:
 800522a:	4770      	bx	lr

0800522c <_init>:
 800522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522e:	bf00      	nop
 8005230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005232:	bc08      	pop	{r3}
 8005234:	469e      	mov	lr, r3
 8005236:	4770      	bx	lr

08005238 <_fini>:
 8005238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800523a:	bf00      	nop
 800523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523e:	bc08      	pop	{r3}
 8005240:	469e      	mov	lr, r3
 8005242:	4770      	bx	lr
